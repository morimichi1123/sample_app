# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-

# line 1 "lib/parser/lexer.rl"

# line 3 "lib/parser/lexer.rl"
#
# === BEFORE YOU START ===
#
# Read the Ruby Hacking Guide chapter 11, available in English at
# http://whitequark.org/blog/2013/04/01/ruby-hacking-guide-ch-11-finite-state-lexer/
#
# Remember two things about Ragel scanners:
#
#   1) Longest match wins.
#
#   2) If two matches have the same length, the first
#      in source code wins.
#
# General rules of making Ragel and Bison happy:
#
#  * `p` (position) and `@te` contain the index of the character
#    they're pointing to ("current"), plus one. `@ts` contains the index
#    of the corresponding character. The code for extracting matched token is:
#
#       @source_buffer.slice(@ts...@te)
#
#  * If your input is `foooooooobar` and the rule is:
#
#       'f' 'o'+
#
#    the result will be:
#
#       foooooooobar
#       ^ ts=0   ^ p=te=9
#
#  * A Ragel lexer action should not emit more than one token, unless
#    you know what you are doing.
#
#  * All Ragel commands (fnext, fgoto, ...) end with a semicolon.
#
#  * If an action emits the token and transitions to another state, use
#    these Ragel commands:
#
#       emit($whatever)
#       fnext $next_state; fbreak;
#
#    If you perform `fgoto` in an action which does not emit a token nor
#    rewinds the stream pointer, the parser's side-effectful,
#    context-sensitive lookahead actions will break in a hard to detect
#    and debug way.
#
#  * If an action does not emit a token:
#
#       fgoto $next_state;
#
#  * If an action features lookbehind, i.e. matches characters with the
#    intent of passing them to another action:
#
#       p = @ts - 1
#       fgoto $next_state;
#
#    or, if the lookbehind consists of a single character:
#
#       fhold; fgoto $next_state;
#
#  * Ragel merges actions. So, if you have `e_lparen = '(' %act` and
#    `c_lparen = '('` and a lexer action `e_lparen | c_lparen`, the result
#    _will_ invoke the action `act`.
#
#    e_something stands for "something with **e**mbedded action".
#
#  * EOF is explicit and is matched by `c_eof`. If you want to introspect
#    the state of the lexer, add this rule to the state:
#
#       c_eof => do_eof;
#
#  * If you proceed past EOF, the lexer will complain:
#
#       NoMethodError: undefined method `ord' for nil:NilClass
#

class Parser::Lexer

  
# line 85 "lib/parser/lexer.rb"
class << self
	attr_accessor :_lex_trans_keys
	private :_lex_trans_keys, :_lex_trans_keys=
end
self._lex_trans_keys = [
	0, 0, 101, 101, 103, 103, 
	105, 105, 110, 110, 69, 
	69, 78, 78, 68, 68, 
	95, 95, 95, 95, 0, 26, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 45, 
	0, 77, 0, 77, 0, 92, 
	0, 26, 0, 26, 0, 
	45, 0, 99, 0, 26, 
	67, 99, 45, 45, 0, 92, 
	0, 77, 0, 102, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 45, 0, 77, 
	0, 77, 0, 92, 0, 
	26, 0, 26, 0, 45, 
	0, 99, 0, 26, 67, 99, 
	45, 45, 0, 92, 0, 
	77, 0, 102, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 26, 0, 
	127, 58, 58, 58, 58, 
	0, 127, 58, 58, 60, 60, 
	62, 62, 10, 10, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 115, 115, 
	99, 99, 117, 117, 101, 101, 
	108, 116, 101, 101, 115, 
	115, 115, 115, 105, 105, 
	108, 108, 105, 105, 108, 108, 
	58, 58, 0, 127, 10, 
	10, 0, 127, 9, 92, 
	10, 10, 9, 92, 58, 58, 
	98, 98, 101, 101, 103, 
	103, 105, 105, 110, 110, 
	0, 122, 61, 61, 9, 92, 
	9, 92, 9, 92, 9, 
	92, 9, 92, 10, 10, 
	0, 127, 0, 127, 61, 126, 
	93, 93, 0, 127, 0, 
	127, 10, 10, 34, 34, 
	10, 10, 39, 39, 0, 127, 
	10, 96, 96, 96, 0, 
	45, 0, 77, 0, 77, 
	0, 92, 0, 26, 0, 26, 
	0, 45, 0, 99, 0, 
	26, 67, 99, 45, 45, 
	0, 92, 0, 77, 0, 102, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 58, 58, 58, 58, 
	0, 127, 43, 57, 48, 
	57, 48, 57, 10, 10, 
	48, 57, 48, 57, 115, 115, 
	99, 99, 117, 117, 101, 
	101, 99, 99, 117, 117, 
	101, 101, 0, 127, 58, 58, 
	9, 92, 9, 92, 9, 
	92, 9, 92, 9, 92, 
	9, 92, 60, 60, 10, 10, 
	9, 46, 9, 32, 10, 
	10, 10, 10, 10, 10, 
	10, 10, 46, 46, 0, 95, 
	9, 32, 0, 0, 10, 
	10, 10, 10, 98, 98, 
	9, 32, 10, 10, 95, 95, 
	0, 92, 9, 32, 36, 
	123, 0, 127, 48, 57, 
	0, 120, 0, 0, 0, 0, 
	48, 55, 48, 55, 0, 
	0, 0, 0, 0, 92, 
	0, 0, 0, 0, 0, 0, 
	0, 92, 45, 45, 0, 
	0, 0, 0, 0, 0, 
	0, 92, 0, 45, 0, 92, 
	0, 92, 0, 0, 0, 
	0, 0, 92, 0, 45, 
	10, 10, 0, 92, 48, 123, 
	48, 102, 48, 102, 48, 
	102, 0, 0, 0, 125, 
	0, 125, 0, 0, 0, 125, 
	0, 0, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 0, 
	0, 0, 48, 102, 0, 0, 
	0, 92, 36, 123, 0, 
	127, 48, 57, 0, 120, 
	0, 0, 0, 0, 48, 55, 
	48, 55, 0, 0, 0, 
	0, 0, 92, 0, 0, 
	0, 0, 0, 0, 0, 92, 
	45, 45, 0, 0, 0, 
	0, 0, 0, 0, 92, 
	0, 45, 0, 92, 0, 92, 
	0, 0, 0, 0, 0, 
	92, 0, 45, 10, 10, 
	0, 92, 48, 123, 48, 102, 
	48, 102, 48, 102, 0, 
	0, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 0, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 0, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 0, 0, 0, 
	48, 102, 0, 0, 0, 92, 
	9, 32, 0, 26, 0, 
	92, 0, 26, 0, 35, 
	36, 123, 0, 127, 48, 57, 
	0, 26, 0, 35, 9, 
	32, 36, 123, 0, 127, 
	48, 57, 0, 32, 9, 32, 
	65, 122, 65, 122, 36, 
	64, 0, 127, 48, 57, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 9, 
	32, 0, 0, 61, 126, 
	10, 10, 10, 10, 0, 127, 
	0, 127, 48, 57, 115, 
	115, 38, 38, 42, 42, 
	64, 64, 58, 58, 60, 61, 
	62, 62, 61, 126, 61, 
	61, 61, 62, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 93, 93, 10, 10, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	124, 124, 0, 127, 0, 
	127, 9, 32, 10, 10, 
	10, 10, 10, 10, 0, 0, 
	0, 127, 0, 127, 61, 
	61, 0, 0, 9, 32, 
	0, 0, 61, 126, 10, 10, 
	10, 10, 38, 38, 42, 
	42, 64, 64, 60, 61, 
	62, 62, 61, 126, 61, 61, 
	61, 62, 0, 127, 93, 
	93, 10, 10, 124, 124, 
	0, 126, 0, 127, 0, 61, 
	9, 61, 9, 61, 0, 
	0, 9, 61, 9, 62, 
	46, 46, 46, 46, 58, 58, 
	9, 32, 0, 0, 0, 
	127, 0, 0, 9, 124, 
	0, 0, 10, 10, 10, 10, 
	0, 0, 9, 61, 58, 
	58, 60, 60, 62, 62, 
	9, 32, 10, 10, 0, 127, 
	102, 102, 101, 101, 110, 
	110, 104, 104, 0, 127, 
	0, 127, 0, 127, 0, 0, 
	0, 127, 10, 10, 0, 
	123, 9, 32, 10, 10, 
	10, 10, 10, 10, 0, 0, 
	111, 111, 0, 0, 0, 
	127, 0, 127, 9, 32, 
	0, 0, 10, 10, 10, 10, 
	10, 10, 0, 0, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 58, 61, 
	0, 0, 61, 126, 61, 61, 
	0, 0, 0, 0, 0, 
	0, 9, 32, 61, 61, 
	9, 32, 61, 126, 10, 10, 
	10, 10, 65, 122, 0, 
	122, 38, 61, 0, 0, 
	42, 61, 61, 61, 9, 92, 
	9, 92, 9, 92, 46, 
	46, 46, 46, 0, 26, 
	0, 127, 0, 127, 61, 61, 
	0, 0, 61, 126, 61, 
	62, 0, 0, 0, 0, 
	0, 0, 0, 0, 61, 126, 
	0, 127, 48, 57, 38, 
	38, 42, 42, 64, 64, 
	60, 61, 62, 62, 61, 61, 
	61, 62, 0, 127, 48, 
	57, 0, 127, 124, 124, 
	64, 64, 60, 61, 0, 0, 
	10, 34, 10, 39, 96, 
	96, 62, 62, 61, 126, 
	61, 62, 0, 122, 0, 0, 
	0, 127, 0, 127, 0, 
	120, 0, 0, 0, 0, 
	48, 55, 48, 55, 0, 0, 
	0, 0, 0, 92, 0, 
	0, 0, 0, 0, 0, 
	0, 92, 45, 45, 0, 0, 
	0, 0, 0, 0, 0, 
	92, 0, 45, 0, 92, 
	0, 92, 0, 0, 0, 0, 
	0, 92, 0, 45, 10, 
	10, 0, 92, 48, 123, 
	48, 102, 48, 102, 48, 102, 
	0, 0, 0, 125, 0, 
	125, 0, 0, 0, 125, 
	0, 0, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	0, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 0, 
	48, 102, 0, 0, 0, 
	127, 0, 127, 0, 127, 
	0, 0, 10, 10, 0, 0, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	61, 126, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 0, 
	61, 124, 0, 92, 9, 
	32, 0, 0, 10, 10, 
	10, 10, 10, 10, 0, 0, 
	0, 127, 0, 127, 9, 
	32, 0, 0, 10, 10, 
	10, 10, 10, 10, 0, 0, 
	0, 127, 0, 127, 61, 
	61, 0, 0, 9, 32, 
	0, 0, 61, 126, 10, 10, 
	10, 10, 0, 127, 0, 
	127, 48, 57, 61, 61, 
	38, 61, 0, 0, 0, 0, 
	42, 61, 61, 62, 46, 
	58, 46, 46, 48, 101, 
	48, 95, 9, 92, 9, 92, 
	46, 120, 48, 114, 43, 
	57, 48, 105, 102, 102, 
	0, 0, 101, 105, 0, 0, 
	0, 0, 48, 114, 48, 
	114, 48, 114, 48, 114, 
	105, 114, 102, 102, 0, 0, 
	101, 105, 115, 115, 0, 
	0, 0, 0, 48, 114, 
	48, 114, 48, 114, 48, 114, 
	48, 114, 48, 114, 48, 
	114, 48, 114, 46, 114, 
	48, 114, 46, 114, 48, 114, 
	58, 58, 60, 61, 62, 
	62, 61, 126, 61, 61, 
	61, 62, 0, 127, 0, 127, 
	0, 0, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 0, 
	10, 10, 0, 0, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 9, 92, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 0, 61, 
	124, 0, 0, 9, 92, 
	9, 46, 9, 92, 10, 10, 
	46, 46, 10, 10, 10, 
	61, 10, 10, 10, 101, 
	10, 110, 10, 100, 10, 10, 
	0
]

class << self
	attr_accessor :_lex_key_spans
	private :_lex_key_spans, :_lex_key_spans=
end
self._lex_key_spans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 27, 128, 128, 128, 128, 46, 
	78, 78, 93, 27, 27, 46, 100, 27, 
	33, 1, 93, 78, 103, 128, 128, 128, 
	128, 46, 78, 78, 93, 27, 27, 46, 
	100, 27, 33, 1, 93, 78, 103, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 27, 128, 1, 1, 
	128, 1, 1, 1, 1, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 1, 
	1, 1, 1, 9, 1, 1, 1, 1, 
	1, 1, 1, 1, 128, 1, 128, 84, 
	1, 84, 1, 1, 1, 1, 1, 1, 
	123, 1, 84, 84, 84, 84, 84, 1, 
	128, 128, 66, 1, 128, 128, 1, 1, 
	1, 1, 128, 87, 1, 46, 78, 78, 
	93, 27, 27, 46, 100, 27, 33, 1, 
	93, 78, 103, 128, 128, 128, 128, 128, 
	128, 1, 1, 128, 15, 10, 10, 1, 
	10, 10, 1, 1, 1, 1, 1, 1, 
	1, 128, 1, 84, 84, 84, 84, 84, 
	84, 1, 1, 38, 24, 1, 1, 1, 
	1, 1, 96, 24, 0, 1, 1, 1, 
	24, 1, 1, 93, 24, 88, 128, 10, 
	121, 0, 0, 8, 8, 0, 0, 93, 
	0, 0, 0, 93, 1, 0, 0, 0, 
	93, 46, 93, 93, 0, 0, 93, 46, 
	1, 93, 76, 55, 55, 55, 0, 126, 
	126, 0, 126, 0, 126, 126, 126, 126, 
	0, 126, 126, 126, 126, 126, 126, 0, 
	0, 55, 0, 93, 88, 128, 10, 121, 
	0, 0, 8, 8, 0, 0, 93, 0, 
	0, 0, 93, 1, 0, 0, 0, 93, 
	46, 93, 93, 0, 0, 93, 46, 1, 
	93, 76, 55, 55, 55, 0, 126, 126, 
	0, 126, 0, 126, 126, 126, 126, 0, 
	126, 126, 126, 126, 126, 126, 0, 0, 
	55, 0, 93, 24, 27, 93, 27, 36, 
	88, 128, 10, 27, 36, 24, 88, 128, 
	10, 33, 24, 58, 58, 29, 128, 10, 
	128, 128, 128, 128, 128, 24, 0, 66, 
	1, 1, 128, 128, 10, 1, 1, 1, 
	1, 1, 2, 1, 66, 1, 2, 128, 
	128, 128, 128, 128, 128, 128, 1, 1, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 1, 128, 128, 24, 1, 
	1, 1, 0, 128, 128, 1, 0, 24, 
	0, 66, 1, 1, 1, 1, 1, 2, 
	1, 66, 1, 2, 128, 1, 1, 1, 
	127, 128, 62, 53, 53, 0, 53, 54, 
	1, 1, 1, 24, 0, 128, 0, 116, 
	0, 1, 1, 0, 53, 1, 1, 1, 
	24, 1, 128, 1, 1, 1, 1, 128, 
	128, 128, 0, 128, 1, 124, 24, 1, 
	1, 1, 0, 1, 0, 128, 128, 24, 
	0, 1, 1, 1, 0, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 4, 
	0, 66, 1, 0, 0, 0, 24, 1, 
	24, 66, 1, 1, 58, 123, 24, 0, 
	20, 1, 84, 84, 84, 1, 1, 27, 
	128, 128, 1, 0, 66, 2, 0, 0, 
	0, 0, 66, 128, 10, 1, 1, 1, 
	2, 1, 1, 2, 128, 10, 128, 1, 
	1, 2, 0, 25, 30, 1, 1, 66, 
	2, 123, 0, 128, 128, 121, 0, 0, 
	8, 8, 0, 0, 93, 0, 0, 0, 
	93, 1, 0, 0, 0, 93, 46, 93, 
	93, 0, 0, 93, 46, 1, 93, 76, 
	55, 55, 55, 0, 126, 126, 0, 126, 
	0, 126, 126, 126, 126, 0, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 0, 0, 55, 0, 128, 128, 128, 
	0, 1, 0, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	66, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 0, 64, 93, 24, 0, 1, 
	1, 1, 0, 128, 128, 24, 0, 1, 
	1, 1, 0, 128, 128, 1, 0, 24, 
	0, 66, 1, 1, 128, 128, 10, 1, 
	24, 0, 0, 20, 2, 13, 1, 54, 
	48, 84, 84, 75, 67, 15, 58, 1, 
	0, 5, 0, 0, 67, 67, 67, 67, 
	10, 1, 0, 5, 1, 0, 0, 67, 
	67, 67, 67, 67, 67, 67, 67, 69, 
	67, 69, 67, 1, 2, 1, 66, 1, 
	2, 128, 128, 0, 128, 128, 128, 128, 
	128, 128, 0, 1, 0, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 84, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 0, 64, 0, 84, 
	38, 84, 1, 1, 1, 52, 1, 92, 
	101, 91, 1
]

class << self
	attr_accessor :_lex_index_offsets
	private :_lex_index_offsets, :_lex_index_offsets=
end
self._lex_index_offsets = [
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 46, 175, 304, 433, 562, 
	609, 688, 767, 861, 889, 917, 964, 1065, 
	1093, 1127, 1129, 1223, 1302, 1406, 1535, 1664, 
	1793, 1922, 1969, 2048, 2127, 2221, 2249, 2277, 
	2324, 2425, 2453, 2487, 2489, 2583, 2662, 2766, 
	2895, 3024, 3153, 3282, 3411, 3540, 3669, 3798, 
	3927, 4056, 4185, 4314, 4443, 4471, 4600, 4602, 
	4604, 4733, 4735, 4737, 4739, 4741, 4870, 4999, 
	5128, 5257, 5386, 5515, 5644, 5773, 5902, 6031, 
	6160, 6289, 6418, 6547, 6676, 6805, 6934, 7063, 
	7065, 7067, 7069, 7071, 7081, 7083, 7085, 7087, 
	7089, 7091, 7093, 7095, 7097, 7226, 7228, 7357, 
	7442, 7444, 7529, 7531, 7533, 7535, 7537, 7539, 
	7541, 7665, 7667, 7752, 7837, 7922, 8007, 8092, 
	8094, 8223, 8352, 8419, 8421, 8550, 8679, 8681, 
	8683, 8685, 8687, 8816, 8904, 8906, 8953, 9032, 
	9111, 9205, 9233, 9261, 9308, 9409, 9437, 9471, 
	9473, 9567, 9646, 9750, 9879, 10008, 10137, 10266, 
	10395, 10524, 10526, 10528, 10657, 10673, 10684, 10695, 
	10697, 10708, 10719, 10721, 10723, 10725, 10727, 10729, 
	10731, 10733, 10862, 10864, 10949, 11034, 11119, 11204, 
	11289, 11374, 11376, 11378, 11417, 11442, 11444, 11446, 
	11448, 11450, 11452, 11549, 11574, 11575, 11577, 11579, 
	11581, 11606, 11608, 11610, 11704, 11729, 11818, 11947, 
	11958, 12080, 12081, 12082, 12091, 12100, 12101, 12102, 
	12196, 12197, 12198, 12199, 12293, 12295, 12296, 12297, 
	12298, 12392, 12439, 12533, 12627, 12628, 12629, 12723, 
	12770, 12772, 12866, 12943, 12999, 13055, 13111, 13112, 
	13239, 13366, 13367, 13494, 13495, 13622, 13749, 13876, 
	14003, 14004, 14131, 14258, 14385, 14512, 14639, 14766, 
	14767, 14768, 14824, 14825, 14919, 15008, 15137, 15148, 
	15270, 15271, 15272, 15281, 15290, 15291, 15292, 15386, 
	15387, 15388, 15389, 15483, 15485, 15486, 15487, 15488, 
	15582, 15629, 15723, 15817, 15818, 15819, 15913, 15960, 
	15962, 16056, 16133, 16189, 16245, 16301, 16302, 16429, 
	16556, 16557, 16684, 16685, 16812, 16939, 17066, 17193, 
	17194, 17321, 17448, 17575, 17702, 17829, 17956, 17957, 
	17958, 18014, 18015, 18109, 18134, 18162, 18256, 18284, 
	18321, 18410, 18539, 18550, 18578, 18615, 18640, 18729, 
	18858, 18869, 18903, 18928, 18987, 19046, 19076, 19205, 
	19216, 19345, 19474, 19603, 19732, 19861, 19886, 19887, 
	19954, 19956, 19958, 20087, 20216, 20227, 20229, 20231, 
	20233, 20235, 20237, 20240, 20242, 20309, 20311, 20314, 
	20443, 20572, 20701, 20830, 20959, 21088, 21217, 21219, 
	21221, 21350, 21479, 21608, 21737, 21866, 21995, 22124, 
	22253, 22382, 22511, 22640, 22769, 22898, 23027, 23156, 
	23285, 23414, 23543, 23672, 23801, 23930, 24059, 24188, 
	24317, 24446, 24575, 24704, 24833, 24962, 25091, 25220, 
	25349, 25478, 25607, 25736, 25865, 25994, 26123, 26252, 
	26381, 26510, 26639, 26768, 26897, 27026, 27155, 27284, 
	27413, 27542, 27671, 27800, 27929, 28058, 28187, 28316, 
	28445, 28574, 28703, 28832, 28961, 29090, 29219, 29348, 
	29477, 29606, 29735, 29864, 29993, 30122, 30251, 30380, 
	30509, 30638, 30767, 30896, 31025, 31154, 31283, 31412, 
	31541, 31670, 31799, 31928, 31930, 32059, 32188, 32213, 
	32215, 32217, 32219, 32220, 32349, 32478, 32480, 32481, 
	32506, 32507, 32574, 32576, 32578, 32580, 32582, 32584, 
	32587, 32589, 32656, 32658, 32661, 32790, 32792, 32794, 
	32796, 32924, 33053, 33116, 33170, 33224, 33225, 33279, 
	33334, 33336, 33338, 33340, 33365, 33366, 33495, 33496, 
	33613, 33614, 33616, 33618, 33619, 33673, 33675, 33677, 
	33679, 33704, 33706, 33835, 33837, 33839, 33841, 33843, 
	33972, 34101, 34230, 34231, 34360, 34362, 34487, 34512, 
	34514, 34516, 34518, 34519, 34521, 34522, 34651, 34780, 
	34805, 34806, 34808, 34810, 34812, 34813, 34942, 35071, 
	35200, 35329, 35458, 35587, 35716, 35845, 35974, 36103, 
	36232, 36361, 36490, 36619, 36748, 36877, 37006, 37135, 
	37140, 37141, 37208, 37210, 37211, 37212, 37213, 37238, 
	37240, 37265, 37332, 37334, 37336, 37395, 37519, 37544, 
	37545, 37566, 37568, 37653, 37738, 37823, 37825, 37827, 
	37855, 37984, 38113, 38115, 38116, 38183, 38186, 38187, 
	38188, 38189, 38190, 38257, 38386, 38397, 38399, 38401, 
	38403, 38406, 38408, 38410, 38413, 38542, 38553, 38682, 
	38684, 38686, 38689, 38690, 38716, 38747, 38749, 38751, 
	38818, 38821, 38945, 38946, 39075, 39204, 39326, 39327, 
	39328, 39337, 39346, 39347, 39348, 39442, 39443, 39444, 
	39445, 39539, 39541, 39542, 39543, 39544, 39638, 39685, 
	39779, 39873, 39874, 39875, 39969, 40016, 40018, 40112, 
	40189, 40245, 40301, 40357, 40358, 40485, 40612, 40613, 
	40740, 40741, 40868, 40995, 41122, 41249, 41250, 41377, 
	41504, 41631, 41758, 41885, 42012, 42139, 42266, 42393, 
	42520, 42647, 42774, 42901, 43028, 43155, 43282, 43409, 
	43536, 43663, 43664, 43665, 43721, 43722, 43851, 43980, 
	44109, 44110, 44112, 44113, 44242, 44371, 44500, 44629, 
	44758, 44887, 45016, 45145, 45274, 45403, 45532, 45661, 
	45790, 45919, 46048, 46177, 46306, 46435, 46564, 46693, 
	46822, 46951, 47080, 47209, 47338, 47467, 47596, 47725, 
	47854, 47983, 48112, 48241, 48370, 48499, 48628, 48757, 
	48886, 49015, 49144, 49273, 49402, 49531, 49660, 49789, 
	49918, 50047, 50176, 50305, 50434, 50563, 50692, 50821, 
	50950, 51079, 51208, 51337, 51466, 51595, 51724, 51853, 
	51982, 52049, 52178, 52307, 52436, 52565, 52694, 52823, 
	52952, 53081, 53210, 53339, 53468, 53597, 53726, 53855, 
	53984, 54113, 54242, 54371, 54500, 54629, 54758, 54887, 
	55016, 55145, 55274, 55275, 55340, 55434, 55459, 55460, 
	55462, 55464, 55466, 55467, 55596, 55725, 55750, 55751, 
	55753, 55755, 55757, 55758, 55887, 56016, 56018, 56019, 
	56044, 56045, 56112, 56114, 56116, 56245, 56374, 56385, 
	56387, 56412, 56413, 56414, 56435, 56438, 56452, 56454, 
	56509, 56558, 56643, 56728, 56804, 56872, 56888, 56947, 
	56949, 56950, 56956, 56957, 56958, 57026, 57094, 57162, 
	57230, 57241, 57243, 57244, 57250, 57252, 57253, 57254, 
	57322, 57390, 57458, 57526, 57594, 57662, 57730, 57798, 
	57868, 57936, 58006, 58074, 58076, 58079, 58081, 58148, 
	58150, 58153, 58282, 58411, 58412, 58541, 58670, 58799, 
	58928, 59057, 59186, 59187, 59189, 59190, 59319, 59448, 
	59577, 59706, 59835, 59964, 60093, 60222, 60351, 60480, 
	60609, 60738, 60867, 60996, 61125, 61254, 61383, 61512, 
	61641, 61770, 61899, 62028, 62157, 62286, 62415, 62544, 
	62673, 62802, 62931, 63060, 63189, 63318, 63447, 63576, 
	63705, 63834, 63963, 64048, 64177, 64306, 64435, 64564, 
	64693, 64822, 64951, 65080, 65209, 65338, 65467, 65596, 
	65725, 65854, 65983, 66112, 66241, 66370, 66499, 66628, 
	66757, 66886, 67015, 67144, 67273, 67402, 67531, 67660, 
	67789, 67918, 68047, 68176, 68305, 68434, 68563, 68692, 
	68821, 68950, 69079, 69208, 69337, 69466, 69595, 69724, 
	69853, 69982, 70111, 70240, 70369, 70498, 70627, 70756, 
	70885, 71014, 71143, 71272, 71401, 71530, 71659, 71788, 
	71917, 72046, 72175, 72304, 72433, 72434, 72499, 72500, 
	72585, 72624, 72709, 72711, 72713, 72715, 72768, 72770, 
	72863, 72965, 73057
]

class << self
	attr_accessor :_lex_indicies
	private :_lex_indicies, :_lex_indicies=
end
self._lex_indicies = [
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 0, 0, 10, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 10, 0, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 12, 14, 12, 14, 14, 12, 12, 
	14, 14, 14, 15, 14, 14, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	14, 14, 14, 14, 14, 14, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 14, 12, 12, 13, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 12, 12, 14, 12, 13, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 12, 12, 12, 12, 12, 12, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 14, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 12, 14, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 12, 12, 12, 12, 12, 12, 
	17, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 13, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	13, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	13, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 13, 18, 19, 19, 19, 18, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 18, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 20, 
	19, 18, 21, 21, 21, 18, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 23, 21, 
	18, 21, 21, 21, 18, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 18, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 24, 21, 18, 
	25, 25, 25, 18, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 18, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 27, 25, 18, 28, 28, 
	28, 18, 28, 28, 28, 28, 28, 29, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 18, 
	28, 18, 28, 28, 28, 18, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 18, 28, 18, 19, 19, 
	19, 18, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 18, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 30, 19, 18, 31, 31, 31, 
	18, 31, 31, 31, 31, 31, 32, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 18, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 33, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	34, 31, 31, 31, 31, 31, 31, 35, 
	31, 18, 31, 31, 31, 18, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 18, 31, 36, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 37, 18, 37, 
	18, 18, 38, 38, 38, 18, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 18, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	39, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 40, 38, 18, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 22, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 18, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 24, 21, 18, 41, 
	41, 41, 18, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	18, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 43, 45, 43, 45, 45, 43, 43, 
	45, 45, 45, 46, 45, 45, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	45, 45, 45, 45, 45, 45, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 45, 43, 43, 44, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 43, 43, 45, 43, 44, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 43, 43, 43, 43, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 45, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 43, 45, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 43, 43, 43, 43, 43, 43, 
	48, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 44, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	44, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	43, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	44, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	43, 44, 49, 50, 50, 50, 49, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 49, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 51, 
	50, 49, 52, 52, 52, 49, 52, 52, 
	52, 52, 52, 53, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	49, 52, 52, 52, 49, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 49, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 55, 52, 49, 
	56, 56, 56, 49, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 49, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 57, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 58, 56, 49, 59, 59, 
	59, 49, 59, 59, 59, 59, 59, 60, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 49, 
	59, 49, 59, 59, 59, 49, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 49, 59, 49, 50, 50, 
	50, 49, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 49, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 61, 50, 49, 62, 62, 62, 
	49, 62, 62, 62, 62, 62, 63, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 49, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	65, 62, 62, 62, 62, 62, 62, 66, 
	62, 49, 62, 62, 62, 49, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 49, 62, 67, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 68, 49, 68, 
	49, 49, 69, 69, 69, 49, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 49, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	70, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 49, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 53, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 49, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 55, 52, 49, 72, 
	72, 72, 49, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	49, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 76, 
	76, 74, 76, 74, 76, 76, 74, 74, 
	76, 76, 76, 77, 76, 76, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 74, 76, 74, 74, 75, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 74, 74, 74, 76, 74, 75, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 74, 74, 74, 74, 74, 74, 74, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 74, 74, 74, 74, 76, 74, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 74, 74, 74, 74, 74, 76, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 74, 74, 74, 74, 74, 74, 
	79, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 75, 
	74, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 74, 
	75, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 74, 
	74, 74, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 74, 74, 74, 74, 
	75, 74, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 74, 74, 74, 74, 
	74, 75, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 82, 82, 80, 82, 80, 
	82, 82, 80, 80, 82, 82, 82, 83, 
	82, 82, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 82, 82, 82, 82, 
	82, 82, 82, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 80, 82, 80, 
	80, 81, 82, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 80, 80, 80, 
	82, 80, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 80, 80, 80, 
	80, 80, 80, 80, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 80, 80, 
	80, 80, 82, 80, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 80, 80, 
	80, 80, 80, 82, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 80, 80, 
	80, 80, 80, 80, 85, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 80, 
	80, 80, 80, 81, 80, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 80, 
	80, 80, 80, 80, 81, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 80, 
	80, 80, 80, 80, 80, 80, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	80, 80, 80, 80, 81, 80, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	80, 80, 80, 80, 80, 81, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 87, 
	87, 88, 87, 88, 87, 87, 88, 88, 
	87, 87, 87, 89, 87, 87, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	87, 87, 87, 87, 87, 87, 87, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 88, 87, 88, 88, 86, 87, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 88, 88, 88, 87, 88, 86, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 88, 88, 88, 88, 88, 88, 88, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 88, 88, 88, 88, 87, 88, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 88, 88, 88, 88, 88, 87, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 88, 88, 88, 88, 88, 88, 
	93, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 88, 88, 88, 88, 91, 
	88, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 88, 88, 88, 88, 88, 
	91, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 88, 88, 88, 88, 88, 
	88, 88, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 88, 88, 88, 88, 
	94, 88, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 88, 88, 88, 88, 
	88, 94, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 95, 95, 95, 95, 
	95, 95, 95, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 95, 95, 95, 
	95, 96, 95, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 95, 95, 95, 
	95, 95, 96, 97, 98, 98, 98, 97, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 97, 98, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	101, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 102, 99, 99, 99, 99, 101, 99, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 99, 99, 99, 99, 100, 99, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 99, 99, 99, 99, 99, 100, 
	102, 99, 99, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 106, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 107, 104, 
	104, 104, 104, 106, 104, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 104, 
	104, 104, 104, 105, 104, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 104, 
	104, 104, 104, 104, 105, 107, 104, 109, 
	108, 110, 108, 111, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 113, 108, 
	113, 113, 113, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 113, 108, 108, 
	108, 108, 114, 115, 108, 116, 108, 117, 
	118, 119, 120, 121, 114, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 122, 
	108, 123, 119, 124, 125, 108, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	126, 127, 119, 128, 112, 108, 112, 112, 
	112, 112, 112, 112, 112, 112, 129, 112, 
	112, 112, 112, 112, 112, 112, 112, 130, 
	112, 112, 131, 112, 132, 112, 112, 112, 
	133, 134, 108, 128, 108, 112, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 135, 
	108, 135, 135, 135, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 135, 108, 
	108, 108, 108, 136, 137, 108, 138, 108, 
	139, 140, 141, 142, 143, 136, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	144, 108, 145, 141, 146, 147, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 148, 149, 141, 110, 105, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 150, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	151, 105, 105, 152, 105, 153, 105, 105, 
	105, 154, 155, 108, 110, 108, 105, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	106, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 107, 108, 108, 108, 108, 106, 108, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 108, 108, 108, 108, 105, 108, 
	105, 105, 105, 105, 105, 156, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 108, 108, 108, 108, 108, 105, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 106, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 107, 108, 108, 108, 108, 106, 
	108, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 108, 108, 108, 108, 105, 
	108, 105, 105, 105, 105, 157, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 108, 108, 108, 108, 108, 
	105, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 106, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 107, 108, 108, 108, 108, 
	106, 108, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 108, 108, 108, 108, 
	105, 108, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 158, 105, 105, 105, 
	105, 105, 105, 105, 108, 108, 108, 108, 
	108, 105, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 106, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 107, 108, 108, 108, 
	108, 106, 108, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 108, 108, 108, 
	108, 105, 108, 105, 105, 159, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 108, 108, 108, 
	108, 108, 105, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 106, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 107, 108, 108, 
	108, 108, 106, 108, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 108, 108, 
	108, 108, 105, 108, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	160, 105, 105, 105, 105, 105, 108, 108, 
	108, 108, 108, 105, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 106, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 107, 108, 
	108, 108, 108, 106, 108, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 108, 
	108, 108, 108, 105, 108, 105, 105, 105, 
	105, 156, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 108, 
	108, 108, 108, 108, 105, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 106, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 107, 
	108, 108, 108, 108, 106, 108, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	108, 108, 108, 108, 105, 108, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 161, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	108, 108, 108, 108, 108, 105, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 106, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	107, 108, 108, 108, 108, 106, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 108, 108, 108, 108, 105, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 162, 105, 105, 105, 105, 105, 
	105, 105, 163, 105, 105, 105, 105, 105, 
	105, 108, 108, 108, 108, 108, 105, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	106, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 107, 108, 108, 108, 108, 106, 108, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 108, 108, 108, 108, 105, 108, 
	105, 105, 105, 105, 164, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 108, 108, 108, 108, 108, 105, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 106, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 107, 108, 108, 108, 108, 106, 
	108, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 108, 108, 108, 108, 105, 
	108, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 165, 105, 105, 105, 105, 
	105, 105, 105, 108, 108, 108, 108, 108, 
	105, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 106, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 107, 108, 108, 108, 108, 
	106, 108, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 108, 108, 108, 108, 
	105, 108, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 156, 105, 105, 105, 
	105, 105, 105, 105, 108, 108, 108, 108, 
	108, 105, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 106, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 107, 108, 108, 108, 
	108, 106, 108, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 108, 108, 108, 
	108, 105, 108, 105, 105, 105, 105, 105, 
	105, 105, 105, 166, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 108, 108, 108, 
	108, 108, 105, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 106, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 107, 108, 108, 
	108, 108, 106, 108, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 108, 108, 
	108, 108, 105, 108, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 156, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 108, 108, 
	108, 108, 108, 105, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 106, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 107, 108, 
	108, 108, 108, 106, 108, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 108, 
	108, 108, 108, 105, 108, 105, 105, 105, 
	105, 105, 105, 105, 167, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 108, 
	108, 108, 108, 108, 105, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 106, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 107, 
	108, 108, 108, 108, 106, 108, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	108, 108, 108, 108, 105, 108, 105, 105, 
	105, 105, 105, 105, 105, 105, 168, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	108, 108, 108, 108, 108, 105, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 106, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	107, 108, 108, 108, 108, 106, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 108, 108, 108, 108, 105, 108, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 160, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 108, 108, 108, 108, 108, 105, 170, 
	169, 171, 169, 172, 169, 141, 169, 173, 
	169, 169, 169, 169, 169, 169, 169, 174, 
	169, 175, 169, 176, 169, 141, 169, 177, 
	169, 141, 169, 178, 169, 172, 169, 180, 
	179, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 183, 181, 183, 183, 183, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 183, 181, 181, 181, 181, 181, 181, 
	181, 184, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 181, 185, 181, 181, 
	182, 181, 182, 182, 182, 186, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 181, 181, 181, 181, 
	181, 182, 187, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 189, 181, 189, 
	189, 189, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 189, 181, 181, 181, 
	181, 181, 181, 181, 190, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 181, 181, 181, 
	181, 181, 181, 181, 181, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 181, 
	191, 181, 181, 188, 181, 188, 188, 188, 
	192, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 181, 
	181, 181, 181, 181, 188, 194, 193, 194, 
	194, 194, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 194, 193, 193, 193, 
	193, 193, 193, 193, 195, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	196, 193, 197, 193, 198, 193, 198, 198, 
	198, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 198, 193, 193, 193, 193, 
	193, 193, 193, 199, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 200, 
	193, 201, 202, 204, 203, 205, 203, 206, 
	203, 207, 203, 208, 203, 209, 210, 210, 
	210, 209, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 209, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	210, 210, 210, 210, 210, 210, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	210, 212, 201, 213, 214, 213, 213, 213, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 213, 201, 201, 215, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 217, 201, 
	218, 219, 218, 218, 218, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 218, 
	201, 201, 220, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 221, 
	221, 221, 221, 221, 221, 221, 221, 221, 
	221, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 222, 201, 224, 225, 224, 
	224, 224, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 224, 223, 223, 226, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	228, 223, 230, 231, 230, 230, 230, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 230, 229, 229, 232, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 234, 229, 230, 
	235, 230, 230, 230, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 230, 229, 
	229, 232, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 234, 229, 214, 201, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 238, 
	238, 236, 238, 236, 238, 238, 236, 236, 
	238, 238, 238, 239, 238, 238, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	238, 238, 238, 238, 238, 238, 238, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 236, 238, 236, 236, 237, 238, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 236, 236, 236, 238, 236, 237, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 236, 236, 236, 236, 236, 236, 236, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 236, 236, 236, 236, 238, 236, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 236, 236, 236, 236, 236, 238, 
	241, 238, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 238, 236, 241, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 243, 
	236, 236, 236, 236, 244, 236, 236, 236, 
	236, 236, 245, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 212, 236, 236, 236, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	236, 236, 236, 236, 242, 246, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	236, 236, 236, 245, 236, 242, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	249, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	248, 248, 248, 248, 248, 248, 248, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 248, 248, 248, 248, 247, 248, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 248, 248, 248, 248, 248, 247, 251, 
	250, 254, 253, 249, 248, 254, 255, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 243, 236, 236, 236, 236, 244, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 236, 236, 236, 236, 242, 246, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 236, 236, 236, 236, 236, 242, 
	257, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 256, 254, 256, 
	254, 257, 258, 259, 259, 259, 258, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 258, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 260, 
	259, 258, 261, 261, 261, 258, 261, 261, 
	261, 261, 261, 262, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 258, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 263, 261, 
	258, 261, 261, 261, 258, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 258, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 264, 261, 258, 
	265, 265, 265, 258, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 258, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 266, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 267, 265, 258, 268, 268, 
	268, 258, 268, 268, 268, 268, 268, 269, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 258, 
	268, 258, 268, 268, 268, 258, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 268, 268, 268, 268, 268, 
	268, 268, 268, 258, 268, 258, 259, 259, 
	259, 258, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 258, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 270, 259, 258, 271, 271, 271, 
	258, 271, 271, 271, 271, 271, 272, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 258, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 273, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	274, 271, 271, 271, 271, 271, 271, 275, 
	271, 258, 271, 271, 271, 258, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 258, 271, 276, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 277, 258, 277, 
	258, 258, 278, 278, 278, 258, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 258, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	279, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 280, 278, 258, 
	261, 261, 261, 258, 261, 261, 261, 261, 
	261, 262, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 258, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 264, 261, 258, 281, 
	281, 281, 258, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	258, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 282, 282, 
	282, 282, 282, 282, 282, 282, 282, 282, 
	281, 281, 281, 281, 281, 281, 281, 282, 
	282, 282, 282, 282, 282, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 282, 
	282, 282, 282, 282, 282, 281, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 284, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	285, 201, 201, 286, 201, 284, 201, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 201, 201, 201, 201, 283, 201, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 201, 201, 201, 201, 201, 283, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	284, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 285, 236, 236, 286, 236, 284, 236, 
	283, 283, 283, 283, 283, 283, 287, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 236, 236, 236, 236, 283, 236, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 236, 236, 236, 236, 236, 283, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 284, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 285, 236, 236, 286, 236, 284, 
	236, 283, 283, 283, 283, 283, 283, 283, 
	283, 288, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 236, 236, 236, 236, 283, 
	236, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 236, 236, 236, 236, 236, 
	283, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 284, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 285, 236, 236, 286, 236, 
	284, 236, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 289, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 236, 236, 236, 236, 
	283, 236, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 236, 236, 236, 236, 
	236, 283, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 284, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 285, 236, 236, 286, 
	236, 284, 236, 283, 283, 283, 289, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 236, 236, 236, 
	236, 283, 236, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 236, 236, 236, 
	236, 236, 283, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 290, 292, 290, 290, 290, 
	290, 290, 290, 290, 290, 290, 290, 290, 
	290, 290, 290, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 293, 290, 290, 
	290, 290, 292, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 291, 290, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 290, 290, 
	290, 290, 290, 291, 293, 290, 290, 294, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 295, 295, 295, 295, 295, 295, 
	295, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 295, 295, 295, 295, 296, 
	295, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 296, 296, 296, 296, 296, 
	296, 296, 296, 295, 295, 295, 295, 295, 
	296, 298, 297, 298, 297, 297, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 299, 
	297, 299, 299, 299, 299, 299, 299, 299, 
	299, 299, 299, 297, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 297, 302, 
	301, 303, 303, 303, 303, 303, 303, 303, 
	303, 303, 303, 301, 304, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 301, 306, 
	305, 307, 305, 308, 305, 309, 305, 311, 
	310, 312, 310, 313, 310, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 295, 
	295, 295, 295, 295, 295, 295, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	295, 295, 295, 295, 314, 295, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	295, 295, 295, 295, 295, 314, 315, 301, 
	316, 317, 316, 316, 316, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 316, 
	301, 301, 318, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 319, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 320, 301, 321, 322, 321, 
	321, 321, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 321, 301, 301, 323, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	324, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	325, 301, 327, 328, 327, 327, 327, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 327, 326, 326, 329, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 330, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 326, 326, 326, 
	326, 326, 326, 326, 326, 331, 326, 333, 
	334, 333, 333, 333, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 333, 332, 
	332, 335, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 336, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 337, 332, 333, 334, 333, 333, 
	333, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 333, 332, 332, 335, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 338, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 337, 
	332, 333, 339, 333, 333, 333, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	333, 332, 332, 335, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 336, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 337, 332, 340, 301, 
	317, 301, 342, 343, 342, 342, 342, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 341, 341, 341, 341, 341, 341, 341, 
	341, 342, 341, 341, 341, 341, 341, 344, 
	341, 341, 341, 341, 341, 341, 341, 345, 
	341, 347, 343, 347, 347, 347, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	346, 346, 346, 346, 346, 346, 346, 346, 
	347, 346, 349, 348, 352, 351, 353, 346, 
	354, 350, 355, 341, 357, 356, 356, 356, 
	357, 356, 356, 356, 356, 358, 359, 358, 
	358, 358, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 357, 356, 
	356, 356, 356, 356, 358, 356, 356, 360, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 361, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	362, 356, 356, 363, 356, 358, 364, 358, 
	358, 358, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 358, 364, 365, 366, 
	367, 368, 369, 371, 370, 373, 374, 373, 
	373, 373, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 372, 373, 372, 359, 370, 
	375, 370, 377, 376, 376, 376, 377, 376, 
	376, 376, 376, 378, 379, 378, 378, 378, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 377, 376, 376, 376, 
	376, 376, 378, 376, 376, 380, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 381, 376, 
	378, 382, 378, 378, 378, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 378, 
	382, 384, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 385, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	386, 383, 387, 387, 387, 387, 387, 387, 
	387, 387, 387, 387, 387, 387, 387, 387, 
	387, 387, 387, 387, 387, 387, 387, 387, 
	387, 387, 387, 387, 387, 387, 387, 387, 
	387, 387, 387, 387, 387, 387, 387, 387, 
	387, 387, 387, 387, 387, 387, 387, 387, 
	387, 387, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 387, 387, 387, 387, 
	387, 387, 387, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 387, 387, 387, 
	387, 13, 387, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 387, 387, 387, 
	387, 387, 13, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 16, 387, 390, 389, 
	389, 389, 390, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	390, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 391, 391, 
	391, 391, 391, 391, 391, 391, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 392, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 393, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 394, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 395, 389, 389, 396, 389, 
	397, 398, 400, 400, 400, 400, 400, 400, 
	400, 400, 399, 401, 401, 401, 401, 401, 
	401, 401, 401, 399, 399, 402, 402, 38, 
	38, 38, 402, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	402, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 39, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 403, 38, 404, 405, 406, 406, 
	38, 38, 38, 406, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 406, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 39, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 407, 38, 37, 406, 408, 
	409, 410, 410, 25, 25, 25, 410, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 410, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 411, 25, 
	406, 19, 19, 19, 406, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 406, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 412, 19, 402, 
	25, 25, 25, 402, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 402, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 27, 25, 402, 413, 413, 
	413, 402, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 402, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 414, 413, 415, 416, 416, 413, 413, 
	413, 416, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 416, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 417, 413, 416, 19, 19, 19, 416, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 416, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	412, 19, 418, 416, 416, 25, 25, 25, 
	416, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 416, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 26, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	27, 25, 420, 420, 420, 420, 420, 420, 
	420, 420, 420, 420, 419, 419, 419, 419, 
	419, 419, 419, 420, 420, 420, 420, 420, 
	420, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 420, 420, 420, 420, 420, 
	420, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 421, 419, 422, 
	422, 422, 422, 422, 422, 422, 422, 422, 
	422, 419, 419, 419, 419, 419, 419, 419, 
	422, 422, 422, 422, 422, 422, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	422, 422, 422, 422, 422, 422, 419, 423, 
	423, 423, 423, 423, 423, 423, 423, 423, 
	423, 419, 419, 419, 419, 419, 419, 419, 
	423, 423, 423, 423, 423, 423, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	423, 423, 423, 423, 423, 423, 419, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 419, 419, 419, 419, 419, 419, 419, 
	424, 424, 424, 424, 424, 424, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	424, 424, 424, 424, 424, 424, 419, 425, 
	428, 427, 427, 427, 428, 427, 427, 427, 
	427, 429, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 428, 427, 427, 427, 427, 427, 
	429, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	430, 430, 430, 430, 430, 430, 430, 430, 
	430, 430, 427, 427, 427, 427, 427, 427, 
	427, 430, 430, 430, 430, 430, 430, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 430, 430, 430, 430, 430, 430, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 431, 427, 428, 
	427, 427, 427, 428, 427, 427, 427, 427, 
	426, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 428, 427, 427, 427, 427, 427, 426, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 427, 427, 427, 427, 427, 427, 427, 
	432, 432, 432, 432, 432, 432, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	432, 432, 432, 432, 432, 432, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 427, 427, 427, 427, 
	427, 427, 427, 427, 433, 427, 426, 428, 
	432, 432, 432, 428, 432, 432, 432, 432, 
	426, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 428, 432, 432, 432, 432, 432, 426, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 432, 432, 426, 432, 434, 428, 
	435, 435, 435, 428, 435, 435, 435, 435, 
	429, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 428, 435, 435, 435, 435, 435, 429, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 430, 
	430, 430, 430, 430, 430, 430, 430, 430, 
	430, 435, 435, 435, 435, 435, 435, 435, 
	430, 430, 430, 430, 430, 430, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	430, 430, 430, 430, 430, 430, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 426, 435, 428, 435, 
	435, 435, 428, 435, 435, 435, 435, 426, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	428, 435, 435, 435, 435, 435, 426, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 432, 432, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	435, 435, 435, 435, 435, 435, 435, 432, 
	432, 432, 432, 432, 432, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 432, 
	432, 432, 432, 432, 432, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 428, 435, 428, 435, 435, 
	435, 428, 435, 435, 435, 435, 436, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 428, 
	435, 435, 435, 435, 435, 436, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 437, 437, 437, 
	437, 437, 437, 437, 437, 437, 437, 435, 
	435, 435, 435, 435, 435, 435, 437, 437, 
	437, 437, 437, 437, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 437, 437, 
	437, 437, 437, 437, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 438, 435, 428, 435, 435, 435, 
	428, 435, 435, 435, 435, 436, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 428, 435, 
	435, 435, 435, 435, 436, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 430, 430, 430, 430, 
	430, 430, 430, 430, 430, 430, 435, 435, 
	435, 435, 435, 435, 435, 430, 430, 430, 
	430, 430, 430, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 430, 430, 430, 
	430, 430, 430, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 438, 435, 439, 428, 435, 435, 435, 
	428, 435, 435, 435, 435, 436, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 428, 435, 
	435, 435, 435, 435, 436, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 435, 435, 
	435, 435, 435, 435, 435, 440, 440, 440, 
	440, 440, 440, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 440, 440, 440, 
	440, 440, 440, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 438, 435, 428, 435, 435, 435, 428, 
	435, 435, 435, 435, 436, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 428, 435, 435, 
	435, 435, 435, 436, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 441, 441, 441, 441, 441, 
	441, 441, 441, 441, 441, 435, 435, 435, 
	435, 435, 435, 435, 441, 441, 441, 441, 
	441, 441, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 441, 441, 441, 441, 
	441, 441, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	438, 435, 428, 435, 435, 435, 428, 435, 
	435, 435, 435, 436, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 428, 435, 435, 435, 
	435, 435, 436, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 442, 442, 442, 442, 442, 442, 
	442, 442, 442, 442, 435, 435, 435, 435, 
	435, 435, 435, 442, 442, 442, 442, 442, 
	442, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 442, 442, 442, 442, 442, 
	442, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 438, 
	435, 428, 435, 435, 435, 428, 435, 435, 
	435, 435, 436, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 428, 435, 435, 435, 435, 
	435, 436, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 435, 435, 435, 435, 435, 
	435, 435, 443, 443, 443, 443, 443, 443, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 443, 443, 443, 443, 443, 443, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 438, 435, 
	428, 435, 435, 435, 428, 435, 435, 435, 
	435, 436, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 428, 435, 435, 435, 435, 435, 
	436, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 444, 435, 435, 435, 435, 435, 435, 
	435, 444, 444, 444, 444, 444, 444, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 444, 444, 444, 444, 444, 444, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 438, 435, 428, 
	435, 435, 435, 428, 435, 435, 435, 435, 
	426, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 428, 435, 435, 435, 435, 435, 426, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 444, 
	444, 444, 444, 444, 444, 444, 444, 444, 
	444, 435, 435, 435, 435, 435, 435, 435, 
	444, 444, 444, 444, 444, 444, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	444, 444, 444, 444, 444, 444, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 426, 435, 445, 446, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 447, 447, 447, 447, 447, 447, 
	447, 448, 448, 448, 448, 448, 448, 447, 
	447, 447, 447, 447, 447, 447, 447, 447, 
	447, 447, 447, 447, 447, 447, 447, 447, 
	447, 447, 447, 447, 447, 447, 447, 447, 
	447, 448, 448, 448, 448, 448, 448, 447, 
	447, 450, 449, 449, 449, 450, 449, 449, 
	449, 449, 449, 451, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 450, 449, 449, 449, 449, 
	449, 449, 449, 449, 452, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 453, 449, 455, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 456, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 457, 454, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 458, 458, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 458, 458, 458, 458, 458, 458, 
	458, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 458, 458, 458, 458, 44, 
	458, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 458, 458, 458, 458, 458, 
	44, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 458, 461, 460, 460, 460, 
	461, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 461, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 462, 462, 462, 462, 
	462, 462, 462, 462, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 463, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 464, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 465, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 460, 460, 460, 460, 460, 460, 460, 
	460, 466, 460, 460, 467, 460, 468, 469, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	470, 472, 472, 472, 472, 472, 472, 472, 
	472, 470, 470, 473, 473, 69, 69, 69, 
	473, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 473, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 70, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	474, 69, 475, 476, 477, 477, 69, 69, 
	69, 477, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 477, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 70, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 478, 69, 68, 477, 479, 480, 481, 
	481, 56, 56, 56, 481, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 481, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 57, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 482, 56, 477, 50, 
	50, 50, 477, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	477, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 483, 50, 473, 56, 56, 
	56, 473, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 473, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 57, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 58, 56, 473, 484, 484, 484, 473, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 473, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 485, 
	484, 486, 487, 487, 484, 484, 484, 487, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 487, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 488, 
	484, 487, 50, 50, 50, 487, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 487, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 483, 50, 
	489, 487, 487, 56, 56, 56, 487, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 487, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 57, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 58, 56, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 490, 490, 490, 490, 490, 490, 
	490, 491, 491, 491, 491, 491, 491, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 491, 491, 491, 491, 491, 491, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 492, 490, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 490, 
	490, 490, 490, 490, 490, 490, 493, 493, 
	493, 493, 493, 493, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 493, 493, 
	493, 493, 493, 493, 490, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 490, 
	490, 490, 490, 490, 490, 490, 494, 494, 
	494, 494, 494, 494, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 494, 494, 
	494, 494, 494, 494, 490, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 490, 
	490, 490, 490, 490, 490, 490, 495, 495, 
	495, 495, 495, 495, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 490, 490, 
	490, 490, 490, 490, 490, 490, 495, 495, 
	495, 495, 495, 495, 490, 496, 499, 498, 
	498, 498, 499, 498, 498, 498, 498, 500, 
	498, 498, 498, 498, 498, 498, 498, 498, 
	498, 498, 498, 498, 498, 498, 498, 498, 
	499, 498, 498, 498, 498, 498, 500, 498, 
	498, 498, 498, 498, 498, 498, 498, 498, 
	498, 498, 498, 498, 498, 498, 501, 501, 
	501, 501, 501, 501, 501, 501, 501, 501, 
	498, 498, 498, 498, 498, 498, 498, 501, 
	501, 501, 501, 501, 501, 498, 498, 498, 
	498, 498, 498, 498, 498, 498, 498, 498, 
	498, 498, 498, 498, 498, 498, 498, 498, 
	498, 498, 498, 498, 498, 498, 498, 501, 
	501, 501, 501, 501, 501, 498, 498, 498, 
	498, 498, 498, 498, 498, 498, 498, 498, 
	498, 498, 498, 498, 498, 498, 498, 498, 
	498, 498, 498, 502, 498, 499, 498, 498, 
	498, 499, 498, 498, 498, 498, 497, 498, 
	498, 498, 498, 498, 498, 498, 498, 498, 
	498, 498, 498, 498, 498, 498, 498, 499, 
	498, 498, 498, 498, 498, 497, 498, 498, 
	498, 498, 498, 498, 498, 498, 498, 498, 
	498, 498, 498, 498, 498, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 498, 
	498, 498, 498, 498, 498, 498, 503, 503, 
	503, 503, 503, 503, 498, 498, 498, 498, 
	498, 498, 498, 498, 498, 498, 498, 498, 
	498, 498, 498, 498, 498, 498, 498, 498, 
	498, 498, 498, 498, 498, 498, 503, 503, 
	503, 503, 503, 503, 498, 498, 498, 498, 
	498, 498, 498, 498, 498, 498, 498, 498, 
	498, 498, 498, 498, 498, 498, 498, 498, 
	498, 498, 504, 498, 497, 499, 503, 503, 
	503, 499, 503, 503, 503, 503, 497, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 499, 
	503, 503, 503, 503, 503, 497, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 503, 503, 
	503, 503, 497, 503, 505, 499, 506, 506, 
	506, 499, 506, 506, 506, 506, 500, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 499, 
	506, 506, 506, 506, 506, 500, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 501, 501, 501, 
	501, 501, 501, 501, 501, 501, 501, 506, 
	506, 506, 506, 506, 506, 506, 501, 501, 
	501, 501, 501, 501, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 501, 501, 
	501, 501, 501, 501, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 497, 506, 499, 506, 506, 506, 
	499, 506, 506, 506, 506, 497, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 499, 506, 
	506, 506, 506, 506, 497, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 503, 503, 503, 503, 
	503, 503, 503, 503, 503, 503, 506, 506, 
	506, 506, 506, 506, 506, 503, 503, 503, 
	503, 503, 503, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 503, 503, 503, 
	503, 503, 503, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 499, 506, 499, 506, 506, 506, 499, 
	506, 506, 506, 506, 507, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 499, 506, 506, 
	506, 506, 506, 507, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 508, 508, 508, 508, 508, 
	508, 508, 508, 508, 508, 506, 506, 506, 
	506, 506, 506, 506, 508, 508, 508, 508, 
	508, 508, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 508, 508, 508, 508, 
	508, 508, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	509, 506, 499, 506, 506, 506, 499, 506, 
	506, 506, 506, 507, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 499, 506, 506, 506, 
	506, 506, 507, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 501, 501, 501, 501, 501, 501, 
	501, 501, 501, 501, 506, 506, 506, 506, 
	506, 506, 506, 501, 501, 501, 501, 501, 
	501, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 501, 501, 501, 501, 501, 
	501, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 509, 
	506, 510, 499, 506, 506, 506, 499, 506, 
	506, 506, 506, 507, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 499, 506, 506, 506, 
	506, 506, 507, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 511, 511, 511, 511, 511, 511, 
	511, 511, 511, 511, 506, 506, 506, 506, 
	506, 506, 506, 511, 511, 511, 511, 511, 
	511, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 511, 511, 511, 511, 511, 
	511, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 509, 
	506, 499, 506, 506, 506, 499, 506, 506, 
	506, 506, 507, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 499, 506, 506, 506, 506, 
	506, 507, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 512, 512, 512, 512, 512, 512, 512, 
	512, 512, 512, 506, 506, 506, 506, 506, 
	506, 506, 512, 512, 512, 512, 512, 512, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 512, 512, 512, 512, 512, 512, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 509, 506, 
	499, 506, 506, 506, 499, 506, 506, 506, 
	506, 507, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 499, 506, 506, 506, 506, 506, 
	507, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	513, 513, 513, 513, 513, 513, 513, 513, 
	513, 513, 506, 506, 506, 506, 506, 506, 
	506, 513, 513, 513, 513, 513, 513, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 513, 513, 513, 513, 513, 513, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 509, 506, 499, 
	506, 506, 506, 499, 506, 506, 506, 506, 
	507, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 499, 506, 506, 506, 506, 506, 507, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 514, 
	514, 514, 514, 514, 514, 514, 514, 514, 
	514, 506, 506, 506, 506, 506, 506, 506, 
	514, 514, 514, 514, 514, 514, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	514, 514, 514, 514, 514, 514, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 509, 506, 499, 506, 
	506, 506, 499, 506, 506, 506, 506, 507, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	499, 506, 506, 506, 506, 506, 507, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 515, 515, 
	515, 515, 515, 515, 515, 515, 515, 515, 
	506, 506, 506, 506, 506, 506, 506, 515, 
	515, 515, 515, 515, 515, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 515, 
	515, 515, 515, 515, 515, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 509, 506, 499, 506, 506, 
	506, 499, 506, 506, 506, 506, 497, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 499, 
	506, 506, 506, 506, 506, 497, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 515, 515, 515, 
	515, 515, 515, 515, 515, 515, 515, 506, 
	506, 506, 506, 506, 506, 506, 515, 515, 
	515, 515, 515, 515, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 515, 515, 
	515, 515, 515, 515, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 497, 506, 516, 517, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	518, 518, 518, 518, 518, 518, 518, 519, 
	519, 519, 519, 519, 519, 518, 518, 518, 
	518, 518, 518, 518, 518, 518, 518, 518, 
	518, 518, 518, 518, 518, 518, 518, 518, 
	518, 518, 518, 518, 518, 518, 518, 519, 
	519, 519, 519, 519, 519, 518, 518, 521, 
	520, 520, 520, 521, 520, 520, 520, 520, 
	522, 523, 522, 522, 522, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 521, 520, 520, 520, 520, 520, 522, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 524, 520, 522, 525, 522, 
	522, 522, 525, 525, 525, 525, 525, 525, 
	525, 525, 525, 525, 525, 525, 525, 525, 
	525, 525, 525, 525, 522, 525, 526, 527, 
	527, 527, 526, 527, 527, 527, 527, 527, 
	527, 527, 527, 527, 527, 527, 527, 527, 
	527, 527, 527, 527, 527, 527, 527, 527, 
	526, 527, 529, 528, 528, 528, 529, 528, 
	528, 528, 528, 528, 530, 528, 528, 528, 
	528, 528, 528, 528, 528, 528, 528, 528, 
	528, 528, 528, 528, 529, 528, 528, 528, 
	528, 528, 528, 528, 528, 528, 528, 528, 
	528, 528, 528, 528, 528, 528, 528, 528, 
	528, 528, 528, 528, 528, 528, 528, 528, 
	528, 528, 528, 528, 528, 528, 528, 528, 
	528, 528, 528, 528, 528, 528, 528, 528, 
	528, 528, 528, 528, 528, 528, 528, 528, 
	528, 528, 528, 528, 528, 528, 528, 528, 
	528, 528, 528, 528, 528, 528, 531, 528, 
	532, 533, 533, 533, 532, 533, 533, 533, 
	533, 533, 534, 533, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 532, 533, 536, 535, 535, 535, 
	536, 535, 535, 535, 535, 535, 537, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 536, 535, 
	535, 535, 535, 535, 535, 535, 535, 538, 
	535, 540, 539, 539, 539, 539, 539, 539, 
	539, 539, 539, 539, 539, 539, 539, 539, 
	539, 539, 539, 539, 539, 539, 539, 539, 
	539, 539, 539, 539, 539, 541, 539, 539, 
	539, 539, 539, 539, 539, 539, 539, 539, 
	539, 539, 539, 539, 539, 539, 539, 539, 
	539, 539, 539, 539, 539, 539, 539, 539, 
	539, 539, 539, 539, 539, 539, 539, 539, 
	539, 539, 539, 539, 539, 539, 539, 539, 
	539, 539, 539, 539, 539, 539, 539, 539, 
	539, 539, 539, 539, 539, 539, 539, 539, 
	542, 539, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 543, 543, 543, 543, 
	543, 543, 543, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 543, 543, 543, 
	543, 75, 543, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 543, 543, 543, 
	543, 543, 75, 78, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 543, 545, 544, 
	544, 544, 545, 544, 544, 544, 544, 544, 
	546, 544, 544, 544, 544, 544, 544, 544, 
	544, 544, 544, 544, 544, 544, 544, 544, 
	545, 544, 548, 547, 547, 547, 548, 547, 
	547, 547, 547, 549, 550, 549, 549, 549, 
	547, 547, 547, 547, 547, 547, 547, 547, 
	547, 547, 547, 547, 548, 547, 547, 547, 
	547, 547, 549, 547, 547, 551, 547, 549, 
	552, 549, 549, 549, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 552, 552, 
	552, 552, 552, 552, 552, 552, 549, 552, 
	554, 553, 553, 553, 553, 553, 553, 553, 
	553, 553, 553, 553, 553, 553, 553, 553, 
	553, 553, 553, 553, 553, 553, 553, 553, 
	553, 553, 553, 553, 555, 553, 553, 553, 
	553, 553, 553, 553, 553, 553, 553, 553, 
	553, 553, 553, 553, 553, 553, 553, 553, 
	553, 553, 553, 553, 553, 553, 553, 553, 
	553, 553, 553, 553, 553, 553, 553, 553, 
	553, 553, 553, 553, 553, 553, 553, 553, 
	553, 553, 553, 553, 553, 553, 553, 553, 
	553, 553, 553, 553, 553, 553, 553, 556, 
	553, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 557, 557, 557, 557, 557, 
	557, 557, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 557, 557, 557, 557, 
	81, 557, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 557, 557, 557, 557, 
	557, 81, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 557, 559, 558, 558, 
	558, 559, 558, 558, 558, 558, 560, 561, 
	560, 560, 560, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 559, 
	558, 558, 558, 558, 558, 560, 558, 560, 
	562, 560, 560, 560, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 562, 562, 
	562, 562, 562, 562, 562, 562, 560, 562, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 563, 563, 563, 563, 563, 563, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 563, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 565, 565, 565, 
	565, 565, 565, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 565, 566, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 567, 88, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 568, 568, 568, 568, 
	568, 568, 568, 568, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 568, 568, 
	568, 568, 568, 568, 568, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 568, 
	568, 568, 568, 86, 568, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 568, 
	568, 568, 568, 568, 86, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 568, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	569, 569, 569, 569, 569, 569, 569, 569, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 569, 569, 569, 569, 569, 569, 
	569, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 569, 569, 569, 569, 91, 
	569, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 569, 569, 569, 569, 569, 
	91, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 570, 570, 570, 570, 570, 
	570, 570, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 570, 570, 570, 570, 
	91, 570, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 570, 570, 570, 570, 
	570, 91, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 571, 571, 571, 571, 
	571, 571, 571, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 571, 571, 571, 
	571, 94, 571, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 571, 571, 571, 
	571, 571, 94, 573, 574, 574, 574, 573, 
	574, 574, 574, 574, 575, 576, 575, 575, 
	575, 574, 574, 574, 574, 574, 574, 574, 
	574, 574, 574, 574, 574, 573, 574, 574, 
	574, 574, 574, 575, 577, 574, 578, 579, 
	580, 581, 574, 574, 574, 582, 583, 574, 
	583, 574, 584, 574, 574, 574, 574, 574, 
	574, 574, 574, 574, 574, 585, 574, 586, 
	587, 588, 574, 574, 589, 590, 589, 589, 
	591, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 592, 593, 
	574, 584, 594, 584, 595, 596, 597, 598, 
	599, 600, 572, 572, 601, 572, 572, 572, 
	602, 603, 604, 572, 572, 605, 606, 607, 
	608, 572, 609, 572, 610, 572, 574, 611, 
	574, 583, 574, 572, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 613, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 612, 612, 
	612, 613, 612, 613, 612, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 612, 
	612, 612, 612, 572, 612, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 612, 
	612, 612, 612, 612, 572, 575, 614, 575, 
	575, 575, 614, 614, 614, 614, 614, 614, 
	614, 614, 614, 614, 614, 614, 614, 614, 
	614, 614, 614, 614, 575, 614, 615, 584, 
	616, 616, 584, 616, 616, 616, 616, 616, 
	616, 616, 616, 616, 616, 616, 616, 616, 
	616, 616, 616, 616, 616, 616, 616, 616, 
	616, 616, 616, 616, 616, 616, 616, 616, 
	616, 616, 616, 616, 616, 616, 616, 616, 
	616, 616, 616, 616, 616, 616, 616, 616, 
	616, 616, 616, 616, 616, 616, 616, 616, 
	616, 616, 616, 616, 616, 616, 616, 616, 
	584, 616, 617, 618, 619, 620, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 96, 
	96, 621, 96, 621, 96, 96, 621, 621, 
	96, 96, 96, 623, 96, 96, 624, 624, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	96, 96, 96, 96, 96, 96, 96, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 621, 96, 621, 621, 622, 96, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 621, 621, 621, 96, 621, 622, 625, 
	625, 625, 625, 625, 625, 625, 625, 625, 
	625, 625, 625, 625, 625, 625, 625, 625, 
	625, 625, 625, 625, 625, 625, 625, 625, 
	625, 625, 625, 625, 625, 625, 625, 625, 
	625, 625, 625, 625, 625, 625, 625, 625, 
	625, 625, 625, 625, 625, 625, 625, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 625, 625, 625, 625, 625, 625, 625, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 625, 625, 625, 625, 622, 625, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 622, 622, 622, 622, 622, 622, 
	622, 622, 625, 625, 625, 625, 625, 622, 
	624, 624, 624, 624, 624, 624, 624, 624, 
	624, 624, 625, 626, 616, 584, 616, 584, 
	616, 584, 616, 628, 627, 584, 629, 616, 
	584, 616, 630, 584, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 621, 621, 621, 621, 621, 
	621, 621, 621, 584, 621, 584, 616, 584, 
	584, 616, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 612, 613, 612, 612, 612, 612, 
	612, 612, 612, 612, 612, 612, 612, 612, 
	612, 612, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 612, 612, 612, 613, 
	612, 613, 612, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 612, 612, 612, 
	612, 589, 612, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 612, 612, 612, 
	612, 612, 589, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 613, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 631, 631, 631, 
	613, 631, 613, 631, 589, 589, 589, 589, 
	632, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 631, 631, 
	631, 631, 589, 631, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 631, 631, 
	631, 631, 631, 589, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 613, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 631, 631, 
	631, 613, 631, 613, 631, 589, 589, 589, 
	589, 589, 589, 633, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 631, 
	631, 631, 631, 589, 631, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 631, 
	631, 631, 631, 631, 589, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 613, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 631, 
	631, 631, 613, 631, 613, 631, 589, 589, 
	589, 589, 589, 589, 589, 589, 634, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	631, 631, 631, 631, 589, 631, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	631, 631, 631, 631, 631, 589, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 613, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	631, 631, 631, 613, 631, 613, 631, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 635, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 631, 631, 631, 631, 589, 631, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 631, 631, 631, 631, 631, 589, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	613, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 631, 631, 631, 613, 631, 613, 631, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 636, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 631, 631, 631, 631, 589, 631, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 631, 631, 631, 631, 631, 589, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	631, 613, 631, 631, 631, 631, 631, 631, 
	631, 631, 631, 631, 631, 631, 631, 631, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 631, 631, 631, 613, 631, 613, 
	631, 589, 589, 589, 635, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 631, 631, 631, 631, 589, 
	631, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 589, 589, 589, 589, 589, 
	589, 589, 589, 631, 631, 631, 631, 631, 
	589, 630, 621, 576, 621, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 613, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 613, 637, 613, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 638, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 637, 572, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 613, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 613, 637, 613, 637, 572, 
	572, 572, 572, 639, 640, 572, 572, 572, 
	572, 572, 641, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 572, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 637, 572, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	613, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 613, 637, 613, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 642, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 572, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 637, 572, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 613, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 613, 637, 613, 
	637, 572, 572, 643, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 572, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 637, 
	572, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 613, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 613, 637, 
	613, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	644, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	572, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	637, 572, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 613, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 613, 
	637, 613, 637, 572, 572, 572, 645, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 572, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 637, 572, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 613, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	613, 637, 613, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 646, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 572, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 637, 572, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 613, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 613, 637, 613, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 647, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 572, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 637, 572, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 613, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 613, 637, 613, 637, 572, 572, 
	572, 572, 572, 572, 648, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 572, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 637, 572, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 613, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 613, 637, 613, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 649, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 637, 572, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	613, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 613, 637, 613, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 650, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 637, 572, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 613, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 613, 637, 613, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 651, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 572, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 637, 
	572, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 613, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 613, 637, 
	613, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 652, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	572, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	637, 572, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 613, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 613, 
	637, 613, 637, 572, 572, 572, 572, 648, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 572, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 637, 572, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 613, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	613, 637, 613, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 653, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 572, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 637, 572, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 613, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 613, 637, 613, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 652, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 572, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 637, 572, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 613, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 613, 637, 613, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 572, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 654, 572, 655, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 637, 572, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 613, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 613, 637, 613, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 572, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 656, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 637, 572, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	613, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 613, 637, 613, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 572, 637, 
	657, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 637, 572, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 613, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 613, 637, 613, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 572, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 650, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 637, 
	572, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 613, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 613, 637, 
	613, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	572, 637, 572, 572, 572, 650, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	637, 572, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 613, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 613, 
	637, 613, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 572, 637, 572, 572, 572, 572, 658, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 659, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 637, 572, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 613, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	613, 637, 613, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 572, 637, 572, 572, 572, 572, 
	572, 572, 660, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 637, 572, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 613, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 613, 637, 613, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 572, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 661, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 637, 572, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 613, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 613, 637, 613, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 572, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 650, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 637, 572, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 613, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 613, 637, 613, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 572, 637, 572, 
	572, 572, 572, 662, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 637, 572, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	613, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 613, 637, 613, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 572, 637, 
	663, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 637, 572, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 613, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 613, 637, 613, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 572, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 650, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 637, 
	572, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 613, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 613, 637, 
	613, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	572, 637, 664, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 665, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	637, 572, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 613, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 613, 
	637, 613, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 572, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 666, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 637, 572, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 613, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	613, 637, 613, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 572, 637, 572, 572, 572, 572, 
	650, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 637, 572, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 613, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 613, 637, 613, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 572, 637, 667, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 637, 572, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 613, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 613, 637, 613, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 572, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	657, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 637, 572, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 613, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 613, 637, 613, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 572, 637, 572, 
	572, 572, 572, 668, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 650, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 637, 572, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	613, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 613, 637, 613, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 572, 637, 
	572, 572, 572, 572, 572, 669, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 637, 572, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	670, 613, 670, 670, 670, 670, 670, 670, 
	670, 670, 670, 670, 670, 670, 670, 670, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 670, 670, 670, 613, 670, 613, 
	670, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 670, 670, 670, 670, 572, 
	670, 572, 572, 572, 572, 572, 572, 572, 
	572, 671, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 670, 670, 670, 670, 670, 
	572, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 613, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 613, 637, 
	613, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	572, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 672, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	637, 572, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 613, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 613, 
	637, 613, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 572, 637, 572, 572, 572, 572, 673, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 637, 572, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 613, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	613, 637, 613, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 572, 637, 572, 572, 572, 674, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 637, 572, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 613, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 613, 637, 675, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 572, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 637, 572, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 613, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 613, 637, 613, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 572, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 676, 572, 677, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 637, 572, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 613, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 613, 637, 613, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 572, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 678, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 637, 572, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	613, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 613, 637, 613, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 572, 637, 
	572, 572, 572, 572, 650, 572, 572, 572, 
	679, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 637, 572, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 613, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 613, 637, 613, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 572, 
	637, 572, 572, 572, 572, 572, 650, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 637, 
	572, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 613, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 613, 637, 
	613, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	572, 637, 572, 572, 572, 650, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 680, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	637, 572, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 613, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 613, 
	637, 613, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 572, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 681, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 637, 572, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 613, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	613, 637, 613, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 572, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 666, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 637, 572, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 613, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 613, 637, 613, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 572, 637, 682, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 604, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 637, 572, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 613, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 613, 637, 613, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 572, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 664, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 637, 572, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 613, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 613, 637, 613, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 572, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	650, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 637, 572, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	613, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 613, 637, 613, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 572, 637, 
	572, 572, 572, 572, 572, 650, 572, 572, 
	572, 572, 572, 572, 572, 650, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 637, 572, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 613, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 613, 637, 613, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 572, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 683, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 637, 
	572, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 613, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 613, 637, 
	613, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	572, 637, 572, 572, 572, 684, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	637, 572, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 613, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 613, 
	637, 613, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 572, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 685, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 637, 572, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 613, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	613, 637, 613, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 572, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 666, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 637, 572, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 613, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 613, 637, 613, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 572, 637, 572, 572, 572, 
	572, 686, 572, 572, 572, 687, 572, 572, 
	572, 572, 572, 688, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 637, 572, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 613, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 613, 637, 613, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 572, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 688, 572, 572, 
	637, 637, 637, 637, 637, 572, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 613, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 613, 637, 613, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 572, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 650, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 637, 572, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	613, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 613, 637, 613, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 572, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 650, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 637, 572, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 613, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 613, 637, 613, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 572, 
	637, 572, 572, 572, 572, 689, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 637, 
	572, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 613, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 613, 637, 
	613, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	572, 637, 572, 572, 572, 690, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 691, 692, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	637, 572, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 613, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 613, 
	637, 613, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 572, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 650, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 637, 572, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 613, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	613, 637, 613, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 572, 637, 572, 572, 693, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 637, 572, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 613, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 613, 637, 613, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 572, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 666, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 637, 572, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 613, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 613, 637, 613, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 572, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 694, 
	572, 572, 695, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 637, 572, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 613, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 613, 637, 613, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 572, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 650, 
	572, 637, 637, 637, 637, 637, 572, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	613, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 613, 637, 613, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 572, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 661, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 637, 572, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 613, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 613, 637, 613, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 572, 
	637, 572, 572, 572, 572, 696, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 697, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 637, 
	572, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 613, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 613, 637, 
	613, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	572, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 679, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	637, 572, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 613, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 613, 
	637, 613, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 572, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 698, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 637, 572, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 613, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	613, 637, 613, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 572, 637, 572, 572, 572, 572, 
	604, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 637, 572, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 613, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 613, 637, 613, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 572, 637, 572, 572, 572, 
	572, 572, 572, 572, 699, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 693, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 637, 572, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 613, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 613, 637, 613, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 572, 637, 572, 572, 
	572, 572, 661, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 637, 572, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 613, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 613, 637, 613, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 572, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 700, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 637, 572, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	613, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 613, 637, 613, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 572, 637, 
	572, 572, 572, 701, 572, 572, 572, 572, 
	572, 572, 572, 702, 572, 572, 572, 572, 
	572, 572, 572, 703, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 637, 572, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 613, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 613, 637, 613, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 572, 
	637, 572, 572, 572, 572, 679, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 637, 637, 
	572, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 613, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 637, 637, 637, 613, 637, 
	613, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	572, 637, 572, 572, 572, 572, 667, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 637, 
	637, 572, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 613, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 637, 637, 637, 613, 
	637, 613, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 572, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 687, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	637, 637, 572, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 613, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 637, 637, 637, 
	613, 637, 613, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 572, 637, 572, 572, 572, 572, 
	572, 572, 572, 704, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 637, 637, 572, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 613, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 637, 637, 
	637, 613, 637, 613, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 572, 637, 572, 572, 572, 
	572, 661, 572, 572, 572, 685, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 637, 637, 572, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 613, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 637, 
	637, 637, 613, 637, 613, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 572, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 705, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 637, 637, 572, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 613, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	637, 637, 637, 613, 637, 613, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 572, 637, 572, 
	572, 572, 572, 706, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 637, 637, 572, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 637, 
	613, 637, 637, 637, 637, 637, 637, 637, 
	637, 637, 637, 637, 637, 637, 637, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 637, 637, 637, 613, 637, 613, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 572, 637, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 572, 655, 572, 572, 572, 572, 
	572, 572, 572, 572, 572, 572, 572, 572, 
	572, 572, 637, 637, 637, 637, 637, 572, 
	584, 616, 708, 709, 709, 709, 708, 709, 
	709, 709, 709, 710, 709, 710, 710, 710, 
	709, 709, 709, 709, 709, 709, 709, 709, 
	709, 709, 709, 709, 708, 709, 709, 709, 
	709, 709, 710, 709, 709, 711, 709, 709, 
	709, 709, 709, 709, 709, 709, 709, 709, 
	709, 709, 709, 709, 709, 709, 709, 709, 
	709, 709, 709, 709, 709, 709, 709, 709, 
	709, 709, 709, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 709, 712, 709, 
	709, 707, 709, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 709, 709, 709, 
	709, 709, 707, 713, 713, 713, 713, 713, 
	713, 713, 713, 713, 713, 713, 713, 713, 
	713, 713, 713, 713, 713, 713, 713, 713, 
	713, 713, 713, 713, 713, 713, 713, 713, 
	713, 713, 713, 713, 101, 713, 713, 713, 
	713, 713, 713, 713, 713, 713, 713, 713, 
	713, 713, 713, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 102, 713, 713, 
	713, 713, 101, 713, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 713, 713, 
	713, 713, 100, 713, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 100, 100, 
	100, 100, 100, 100, 100, 100, 713, 713, 
	713, 713, 713, 100, 710, 714, 710, 710, 
	710, 714, 714, 714, 714, 714, 714, 714, 
	714, 714, 714, 714, 714, 714, 714, 714, 
	714, 714, 714, 710, 714, 715, 716, 717, 
	718, 719, 713, 720, 722, 723, 723, 723, 
	722, 723, 723, 723, 723, 724, 725, 724, 
	724, 724, 723, 723, 723, 723, 723, 723, 
	723, 723, 723, 723, 723, 723, 722, 723, 
	723, 723, 723, 723, 724, 726, 723, 727, 
	723, 728, 729, 723, 723, 723, 730, 731, 
	723, 731, 723, 728, 723, 723, 723, 723, 
	723, 723, 723, 723, 723, 723, 723, 723, 
	732, 733, 734, 723, 723, 735, 735, 735, 
	735, 735, 735, 735, 735, 735, 735, 735, 
	735, 735, 735, 735, 735, 735, 735, 735, 
	735, 735, 735, 735, 735, 735, 735, 736, 
	737, 723, 728, 721, 728, 721, 721, 721, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	721, 721, 721, 721, 721, 721, 721, 723, 
	738, 723, 731, 723, 721, 739, 739, 739, 
	739, 739, 739, 739, 739, 739, 739, 739, 
	739, 739, 739, 739, 739, 739, 739, 739, 
	739, 739, 739, 739, 739, 739, 739, 739, 
	739, 739, 739, 739, 739, 739, 740, 739, 
	739, 739, 739, 739, 739, 739, 739, 739, 
	739, 739, 739, 739, 739, 721, 721, 721, 
	721, 721, 721, 721, 721, 721, 721, 739, 
	739, 739, 739, 739, 740, 739, 721, 721, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	739, 739, 739, 739, 721, 739, 721, 721, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	721, 721, 721, 721, 721, 721, 721, 721, 
	739, 739, 739, 739, 739, 721, 742, 741, 
	743, 724, 744, 724, 724, 724, 744, 744, 
	744, 744, 744, 744, 744, 744, 744, 744, 
	744, 744, 744, 744, 744, 744, 744, 744, 
	724, 744, 745, 728, 746, 746, 728, 746, 
	746, 746, 746, 746, 746, 746, 746, 746, 
	746, 746, 746, 746, 746, 746, 746, 746, 
	746, 746, 746, 746, 746, 746, 746, 746, 
	746, 746, 746, 746, 746, 746, 746, 746, 
	746, 746, 746, 746, 746, 746, 746, 746, 
	746, 746, 746, 746, 746, 746, 746, 746, 
	746, 746, 746, 746, 746, 746, 746, 746, 
	746, 746, 746, 746, 728, 746, 747, 748, 
	749, 750, 728, 746, 728, 746, 728, 746, 
	728, 751, 746, 728, 746, 753, 728, 752, 
	752, 752, 752, 752, 752, 752, 752, 752, 
	752, 752, 752, 752, 752, 752, 752, 752, 
	752, 752, 752, 752, 752, 752, 752, 752, 
	752, 752, 752, 752, 752, 752, 752, 752, 
	752, 752, 752, 752, 752, 752, 752, 752, 
	752, 752, 752, 752, 752, 752, 752, 752, 
	752, 752, 752, 752, 752, 752, 752, 752, 
	752, 752, 752, 752, 752, 752, 728, 752, 
	728, 746, 728, 728, 746, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 740, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 735, 735, 735, 
	735, 735, 735, 735, 735, 735, 735, 754, 
	754, 754, 754, 754, 740, 754, 735, 735, 
	735, 735, 735, 735, 735, 735, 735, 735, 
	735, 735, 735, 735, 735, 735, 735, 735, 
	735, 735, 735, 735, 735, 735, 735, 735, 
	754, 754, 754, 754, 735, 754, 735, 735, 
	735, 735, 735, 735, 735, 735, 735, 735, 
	735, 735, 735, 735, 735, 735, 735, 735, 
	735, 735, 735, 735, 735, 735, 735, 735, 
	754, 754, 754, 754, 754, 735, 753, 752, 
	725, 752, 728, 746, 756, 755, 755, 755, 
	756, 755, 755, 755, 755, 757, 758, 757, 
	757, 757, 755, 755, 755, 755, 755, 755, 
	755, 755, 755, 755, 755, 755, 756, 755, 
	755, 755, 755, 755, 757, 755, 755, 759, 
	755, 110, 760, 755, 761, 755, 762, 110, 
	141, 763, 143, 110, 755, 755, 755, 755, 
	755, 755, 755, 755, 755, 755, 764, 755, 
	765, 141, 766, 767, 755, 755, 755, 755, 
	755, 755, 755, 755, 755, 755, 755, 755, 
	755, 755, 755, 755, 755, 755, 755, 755, 
	755, 755, 755, 755, 755, 755, 755, 141, 
	768, 141, 110, 755, 755, 755, 755, 755, 
	755, 755, 755, 755, 755, 769, 755, 755, 
	755, 755, 755, 755, 755, 755, 770, 755, 
	755, 771, 755, 772, 755, 755, 755, 154, 
	155, 755, 110, 755, 773, 773, 773, 773, 
	773, 773, 773, 773, 773, 757, 773, 757, 
	757, 757, 773, 773, 773, 773, 773, 773, 
	773, 773, 773, 773, 773, 773, 773, 773, 
	773, 773, 773, 773, 757, 773, 773, 773, 
	773, 136, 137, 773, 138, 773, 139, 140, 
	141, 142, 143, 136, 773, 773, 773, 773, 
	773, 773, 773, 773, 773, 773, 144, 773, 
	145, 141, 146, 147, 773, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 148, 
	149, 141, 110, 105, 773, 105, 105, 105, 
	105, 105, 105, 105, 105, 150, 105, 105, 
	105, 105, 105, 105, 105, 105, 151, 105, 
	105, 152, 105, 153, 105, 105, 105, 154, 
	155, 773, 110, 773, 105, 774, 775, 775, 
	775, 774, 775, 775, 775, 775, 141, 776, 
	141, 141, 141, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 774, 
	775, 775, 775, 775, 775, 141, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 775, 775, 775, 775, 775, 775, 
	775, 775, 141, 775, 141, 776, 141, 141, 
	141, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 141, 104, 104, 104, 104, 
	104, 110, 104, 104, 104, 104, 104, 104, 
	104, 141, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	141, 104, 141, 776, 141, 141, 141, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 141, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 141, 104, 
	777, 141, 776, 141, 141, 141, 778, 778, 
	778, 778, 778, 778, 778, 778, 778, 778, 
	778, 778, 778, 778, 778, 778, 778, 778, 
	141, 778, 778, 778, 778, 778, 778, 778, 
	778, 778, 779, 778, 778, 778, 778, 778, 
	778, 778, 778, 778, 778, 778, 778, 778, 
	778, 778, 778, 778, 778, 141, 778, 141, 
	776, 141, 141, 141, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 141, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 141, 141, 104, 780, 774, 
	141, 774, 782, 781, 784, 785, 784, 784, 
	784, 783, 783, 783, 783, 783, 783, 783, 
	783, 783, 783, 783, 783, 783, 783, 783, 
	783, 783, 783, 784, 783, 786, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 106, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	107, 774, 774, 774, 774, 106, 774, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 774, 774, 774, 774, 105, 774, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 105, 105, 105, 105, 105, 105, 105, 
	105, 774, 774, 774, 774, 774, 105, 787, 
	141, 776, 141, 141, 141, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 141, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 141, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 110, 774, 788, 789, 790, 
	791, 792, 793, 141, 776, 141, 141, 141, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 141, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 110, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 774, 
	774, 774, 774, 774, 774, 774, 774, 141, 
	774, 141, 781, 110, 794, 110, 794, 795, 
	796, 795, 795, 795, 783, 783, 783, 783, 
	783, 783, 783, 783, 783, 783, 783, 783, 
	783, 783, 783, 783, 783, 783, 795, 783, 
	797, 794, 798, 798, 798, 798, 798, 798, 
	798, 798, 798, 113, 798, 113, 113, 113, 
	798, 798, 798, 798, 798, 798, 798, 798, 
	798, 798, 798, 798, 798, 798, 798, 798, 
	798, 798, 113, 798, 798, 798, 798, 114, 
	115, 798, 116, 798, 117, 118, 119, 120, 
	121, 114, 798, 798, 798, 798, 798, 798, 
	798, 798, 798, 798, 122, 798, 123, 119, 
	124, 125, 798, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 112, 112, 112, 
	112, 112, 112, 112, 112, 126, 127, 119, 
	128, 112, 798, 112, 112, 112, 112, 112, 
	112, 112, 112, 129, 112, 112, 112, 112, 
	112, 112, 112, 112, 130, 112, 112, 131, 
	112, 132, 112, 112, 112, 133, 134, 798, 
	128, 798, 112, 141, 794, 799, 794, 800, 
	794, 801, 794, 802, 180, 180, 180, 802, 
	180, 180, 180, 180, 803, 180, 803, 803, 
	803, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 802, 180, 180, 
	180, 180, 180, 803, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 180, 180, 180, 180, 
	180, 180, 180, 180, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 180, 804, 
	180, 180, 182, 180, 182, 182, 182, 186, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 180, 180, 
	180, 180, 180, 182, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 179, 805, 179, 179, 
	179, 179, 179, 179, 179, 179, 179, 179, 
	179, 179, 179, 179, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 180, 179, 
	179, 179, 179, 805, 179, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 179, 
	179, 179, 179, 182, 179, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 179, 
	179, 179, 179, 179, 182, 806, 806, 806, 
	806, 806, 806, 806, 806, 806, 183, 806, 
	183, 183, 183, 806, 806, 806, 806, 806, 
	806, 806, 806, 806, 806, 806, 806, 806, 
	806, 806, 806, 806, 806, 183, 806, 806, 
	806, 806, 806, 806, 806, 184, 806, 806, 
	806, 806, 806, 806, 806, 806, 806, 806, 
	806, 806, 806, 806, 806, 806, 806, 806, 
	806, 806, 806, 806, 806, 806, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	806, 185, 806, 806, 182, 806, 182, 182, 
	182, 186, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	806, 806, 806, 806, 806, 182, 807, 806, 
	806, 806, 806, 806, 806, 806, 806, 806, 
	806, 806, 806, 806, 806, 806, 806, 806, 
	806, 806, 806, 806, 806, 806, 806, 806, 
	806, 806, 806, 806, 806, 806, 806, 806, 
	805, 806, 806, 806, 806, 806, 806, 806, 
	806, 806, 806, 806, 806, 806, 806, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 180, 806, 806, 806, 806, 805, 806, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 806, 806, 806, 806, 182, 806, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 182, 182, 182, 182, 808, 182, 
	182, 182, 182, 182, 182, 182, 182, 182, 
	182, 182, 806, 806, 806, 806, 806, 182, 
	187, 806, 810, 809, 809, 809, 810, 809, 
	809, 809, 809, 811, 809, 811, 811, 811, 
	809, 809, 809, 809, 809, 809, 809, 809, 
	809, 809, 809, 809, 810, 809, 809, 809, 
	809, 809, 811, 809, 809, 812, 809, 809, 
	809, 809, 809, 809, 809, 809, 809, 809, 
	809, 809, 809, 809, 809, 809, 809, 809, 
	809, 809, 809, 809, 809, 809, 809, 809, 
	809, 809, 809, 809, 809, 809, 809, 809, 
	809, 809, 809, 809, 809, 809, 809, 809, 
	809, 809, 809, 809, 809, 809, 809, 809, 
	809, 809, 809, 809, 809, 809, 813, 809, 
	809, 809, 809, 809, 809, 809, 814, 809, 
	809, 809, 809, 809, 809, 809, 809, 809, 
	809, 809, 809, 809, 809, 809, 809, 809, 
	809, 809, 809, 809, 809, 815, 809, 811, 
	816, 811, 811, 811, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 816, 816, 
	816, 816, 816, 816, 816, 816, 811, 816, 
	817, 818, 819, 820, 822, 821, 823, 824, 
	821, 825, 827, 828, 828, 828, 827, 828, 
	828, 828, 828, 829, 830, 829, 829, 829, 
	828, 828, 828, 828, 828, 828, 828, 828, 
	828, 828, 828, 828, 827, 828, 828, 828, 
	828, 828, 829, 828, 828, 831, 828, 828, 
	828, 828, 828, 828, 828, 828, 828, 828, 
	828, 828, 828, 828, 828, 828, 828, 828, 
	828, 828, 828, 828, 828, 828, 828, 828, 
	828, 828, 828, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 828, 832, 828, 
	828, 826, 828, 826, 826, 826, 826, 826, 
	826, 826, 826, 833, 826, 826, 826, 826, 
	826, 826, 826, 826, 834, 826, 826, 835, 
	826, 836, 826, 826, 826, 828, 828, 828, 
	828, 828, 826, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 837, 837, 837, 837, 837, 
	837, 837, 837, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 837, 837, 837, 
	837, 837, 837, 837, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 837, 837, 
	837, 837, 826, 837, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 837, 837, 
	837, 837, 837, 826, 829, 838, 829, 829, 
	829, 838, 838, 838, 838, 838, 838, 838, 
	838, 838, 838, 838, 838, 838, 838, 838, 
	838, 838, 838, 829, 838, 839, 840, 841, 
	842, 843, 845, 844, 846, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 847, 
	847, 847, 847, 847, 847, 847, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	847, 847, 847, 847, 826, 847, 826, 826, 
	826, 826, 826, 848, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	847, 847, 847, 847, 847, 826, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	847, 847, 847, 847, 847, 847, 847, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 847, 847, 847, 847, 826, 847, 826, 
	826, 826, 826, 849, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 847, 847, 847, 847, 847, 826, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 847, 847, 847, 847, 847, 847, 847, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 847, 847, 847, 847, 826, 847, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 850, 826, 826, 826, 826, 826, 
	826, 826, 847, 847, 847, 847, 847, 826, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 847, 847, 847, 847, 847, 847, 
	847, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 847, 847, 847, 847, 826, 
	847, 826, 826, 851, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 847, 847, 847, 847, 847, 
	826, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 847, 847, 847, 847, 847, 
	847, 847, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 847, 847, 847, 847, 
	826, 847, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 852, 826, 
	826, 826, 826, 826, 847, 847, 847, 847, 
	847, 826, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 847, 847, 847, 847, 
	847, 847, 847, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 847, 847, 847, 
	847, 826, 847, 826, 826, 826, 826, 848, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 847, 847, 847, 
	847, 847, 826, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 847, 847, 847, 
	847, 847, 847, 847, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 847, 847, 
	847, 847, 826, 847, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 853, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 847, 847, 
	847, 847, 847, 826, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 847, 847, 
	847, 847, 847, 847, 847, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 847, 
	847, 847, 847, 826, 847, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	854, 826, 826, 826, 826, 826, 826, 826, 
	855, 826, 826, 826, 826, 826, 826, 847, 
	847, 847, 847, 847, 826, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 847, 
	847, 847, 847, 847, 847, 847, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	847, 847, 847, 847, 826, 847, 826, 826, 
	826, 826, 856, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	847, 847, 847, 847, 847, 826, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	847, 847, 847, 847, 847, 847, 847, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 847, 847, 847, 847, 826, 847, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 857, 826, 826, 826, 826, 826, 826, 
	826, 847, 847, 847, 847, 847, 826, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 847, 847, 847, 847, 847, 847, 847, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 847, 847, 847, 847, 826, 847, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 848, 826, 826, 826, 826, 826, 
	826, 826, 847, 847, 847, 847, 847, 826, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 847, 847, 847, 847, 847, 847, 
	847, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 847, 847, 847, 847, 826, 
	847, 826, 826, 826, 826, 826, 826, 826, 
	826, 858, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 847, 847, 847, 847, 847, 
	826, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 847, 847, 847, 847, 847, 
	847, 847, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 847, 847, 847, 847, 
	826, 847, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 848, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 847, 847, 847, 847, 
	847, 826, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 847, 847, 847, 847, 
	847, 847, 847, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 847, 847, 847, 
	847, 826, 847, 826, 826, 826, 826, 826, 
	826, 826, 859, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 847, 847, 847, 
	847, 847, 826, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 847, 847, 847, 
	847, 847, 847, 847, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 847, 847, 
	847, 847, 826, 847, 826, 826, 826, 826, 
	826, 826, 826, 826, 860, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 847, 847, 
	847, 847, 847, 826, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 847, 847, 847, 847, 
	847, 847, 847, 847, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 847, 847, 
	847, 847, 847, 847, 847, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 847, 
	847, 847, 847, 826, 847, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 826, 
	852, 826, 826, 826, 826, 826, 826, 826, 
	826, 826, 826, 826, 826, 826, 826, 847, 
	847, 847, 847, 847, 826, 862, 212, 212, 
	212, 862, 212, 212, 212, 212, 863, 864, 
	863, 863, 863, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 862, 
	212, 212, 212, 212, 212, 863, 865, 212, 
	866, 212, 867, 868, 212, 869, 212, 870, 
	871, 212, 872, 873, 874, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 875, 
	212, 876, 877, 878, 879, 212, 880, 881, 
	880, 880, 882, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	880, 880, 880, 880, 880, 880, 880, 880, 
	883, 884, 212, 885, 886, 212, 887, 888, 
	889, 890, 891, 892, 861, 861, 893, 861, 
	861, 861, 894, 895, 896, 861, 861, 897, 
	898, 899, 900, 861, 901, 861, 902, 861, 
	903, 904, 212, 885, 212, 861, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	905, 906, 906, 906, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 284, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	285, 905, 905, 286, 905, 284, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 907, 905, 905, 861, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 905, 905, 905, 905, 861, 909, 
	908, 908, 910, 908, 911, 913, 914, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 915, 912, 
	917, 916, 918, 919, 920, 863, 921, 863, 
	863, 863, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 863, 921, 923, 922, 
	925, 926, 925, 925, 925, 924, 924, 924, 
	924, 924, 924, 924, 924, 924, 924, 924, 
	924, 924, 924, 924, 924, 924, 924, 925, 
	924, 212, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 212, 927, 928, 929, 930, 931, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 933, 933, 933, 933, 933, 933, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 933, 935, 210, 210, 210, 935, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 935, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 210, 210, 
	210, 210, 210, 210, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 210, 937, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 212, 936, 
	938, 940, 939, 939, 939, 939, 939, 939, 
	939, 939, 939, 939, 939, 939, 939, 939, 
	939, 939, 939, 939, 212, 939, 212, 201, 
	213, 214, 213, 213, 213, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 213, 
	936, 936, 215, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 936, 936, 936, 212, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 217, 936, 230, 231, 230, 
	230, 230, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 230, 229, 229, 232, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	234, 229, 213, 214, 213, 213, 213, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 213, 936, 936, 215, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 936, 936, 936, 212, 212, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 936, 936, 936, 
	936, 936, 936, 936, 936, 217, 936, 942, 
	927, 944, 943, 927, 945, 945, 945, 927, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 927, 945, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	947, 948, 927, 949, 238, 950, 948, 927, 
	927, 951, 952, 927, 952, 927, 238, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 953, 927, 954, 955, 956, 927, 957, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 958, 927, 927, 238, 946, 238, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 927, 959, 927, 960, 927, 946, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 962, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 961, 961, 961, 963, 961, 962, 
	961, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 961, 961, 961, 961, 946, 
	961, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 961, 961, 961, 961, 961, 
	946, 965, 964, 966, 968, 969, 967, 967, 
	967, 967, 967, 967, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 970, 967, 972, 
	973, 971, 974, 975, 976, 977, 238, 961, 
	961, 978, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 238, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 961, 961, 961, 961, 961, 
	961, 961, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 961, 961, 961, 961, 
	237, 961, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 961, 961, 961, 961, 
	961, 237, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 961, 979, 961, 238, 
	961, 238, 961, 238, 980, 961, 238, 961, 
	238, 961, 238, 238, 961, 981, 981, 981, 
	981, 981, 981, 981, 981, 981, 981, 981, 
	981, 981, 981, 981, 981, 981, 981, 981, 
	981, 981, 981, 981, 981, 981, 981, 981, 
	981, 981, 981, 981, 981, 981, 981, 981, 
	981, 981, 981, 981, 981, 981, 981, 981, 
	981, 981, 981, 981, 981, 983, 983, 983, 
	983, 983, 983, 983, 983, 983, 983, 981, 
	981, 981, 981, 981, 981, 984, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	981, 981, 981, 981, 982, 981, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	981, 981, 981, 981, 981, 982, 986, 986, 
	986, 986, 986, 986, 986, 986, 986, 986, 
	985, 987, 987, 987, 987, 987, 987, 987, 
	987, 987, 987, 987, 987, 987, 987, 987, 
	987, 987, 987, 987, 987, 987, 987, 987, 
	987, 987, 987, 987, 987, 987, 987, 987, 
	987, 987, 987, 987, 987, 987, 987, 987, 
	987, 987, 987, 987, 987, 987, 987, 987, 
	987, 989, 989, 989, 989, 989, 989, 989, 
	989, 989, 989, 987, 987, 987, 987, 987, 
	987, 987, 988, 988, 988, 988, 988, 988, 
	988, 988, 988, 988, 988, 988, 988, 988, 
	988, 988, 988, 988, 988, 988, 988, 988, 
	988, 988, 988, 988, 987, 987, 987, 987, 
	988, 987, 988, 988, 988, 988, 988, 988, 
	988, 988, 988, 988, 988, 988, 988, 988, 
	988, 988, 988, 988, 988, 988, 988, 988, 
	988, 988, 988, 988, 987, 987, 987, 987, 
	987, 988, 979, 961, 978, 961, 990, 991, 
	927, 992, 253, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 243, 243, 243, 243, 243, 243, 
	243, 243, 254, 243, 255, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 244, 244, 244, 244, 244, 244, 244, 
	244, 254, 244, 254, 257, 212, 927, 885, 
	212, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	212, 927, 212, 937, 927, 996, 995, 995, 
	995, 996, 995, 995, 995, 995, 997, 998, 
	997, 997, 997, 995, 995, 995, 995, 995, 
	995, 995, 995, 995, 995, 995, 995, 996, 
	995, 995, 995, 995, 995, 997, 995, 995, 
	995, 995, 995, 995, 995, 995, 995, 995, 
	995, 995, 995, 995, 995, 995, 995, 995, 
	995, 995, 995, 995, 995, 995, 995, 995, 
	995, 995, 995, 995, 995, 995, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	995, 1000, 995, 995, 999, 995, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	995, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 
	1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 
	1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 
	1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 
	1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 
	1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 
	1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 
	1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 
	1001, 1001, 1001, 1002, 1002, 1002, 1002, 1002, 
	1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 
	1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 
	1002, 1002, 1002, 1002, 1002, 1001, 1001, 1001, 
	1001, 1002, 1001, 1002, 1002, 1002, 1002, 1002, 
	1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 
	1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 
	1002, 1002, 1002, 1002, 1002, 1001, 1001, 1001, 
	1001, 1001, 1002, 1003, 1003, 1003, 1003, 1003, 
	1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 
	1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 
	1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 
	1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 
	1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 
	1003, 1003, 1003, 1004, 1004, 1004, 1004, 1004, 
	1004, 1004, 1004, 1004, 1004, 1003, 1003, 1003, 
	1003, 1003, 1003, 1003, 1004, 1004, 1004, 1004, 
	1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 
	1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 
	1004, 1004, 1004, 1004, 1004, 1004, 1003, 1003, 
	1003, 1003, 1004, 1003, 1004, 1004, 1004, 1004, 
	1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 
	1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 
	1004, 1004, 1004, 1004, 1004, 1004, 1003, 1003, 
	1003, 1003, 1003, 1004, 1007, 1006, 1006, 1006, 
	1007, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 
	1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 
	1006, 1006, 1006, 1006, 1006, 1006, 1007, 1006, 
	1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 
	1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 
	1006, 1006, 1006, 1006, 1008, 1008, 1008, 1008, 
	1008, 1008, 1008, 1008, 1006, 1006, 1006, 1006, 
	1006, 1006, 1006, 1006, 1006, 1006, 1006, 1009, 
	1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 
	1006, 1010, 1006, 1006, 1006, 1006, 1006, 1006, 
	1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 
	1006, 1006, 1006, 1006, 1006, 1006, 1006, 1011, 
	1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 
	1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 
	1006, 1012, 1006, 1006, 1013, 1006, 1014, 1015, 
	1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 
	1016, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 
	1018, 1016, 1016, 1019, 1019, 278, 278, 278, 
	1019, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 1019, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 279, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	1020, 278, 1021, 1022, 1023, 1023, 278, 278, 
	278, 1023, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 1023, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 279, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 1024, 278, 277, 1023, 1025, 1026, 1027, 
	1027, 265, 265, 265, 1027, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 1027, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 266, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 1028, 265, 1023, 259, 
	259, 259, 1023, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	1023, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 1029, 259, 1019, 265, 265, 
	265, 1019, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 1019, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 266, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 267, 265, 1019, 1030, 1030, 1030, 1019, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1019, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1031, 
	1030, 1032, 1033, 1033, 1030, 1030, 1030, 1033, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1033, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1034, 
	1030, 1033, 259, 259, 259, 1033, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 1033, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 1029, 259, 
	1035, 1033, 1033, 265, 265, 265, 1033, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 1033, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 266, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 265, 265, 
	265, 265, 265, 265, 265, 265, 267, 265, 
	1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 
	1037, 1037, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1037, 1037, 1037, 1037, 1037, 1037, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1037, 1037, 1037, 1037, 1037, 1037, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1038, 1036, 1039, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1039, 1039, 
	1039, 1039, 1039, 1039, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1039, 1039, 
	1039, 1039, 1039, 1039, 1036, 1040, 1040, 1040, 
	1040, 1040, 1040, 1040, 1040, 1040, 1040, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1040, 1040, 
	1040, 1040, 1040, 1040, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1040, 1040, 
	1040, 1040, 1040, 1040, 1036, 1041, 1041, 1041, 
	1041, 1041, 1041, 1041, 1041, 1041, 1041, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1041, 1041, 
	1041, 1041, 1041, 1041, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1036, 1036, 1041, 1041, 
	1041, 1041, 1041, 1041, 1036, 1042, 1045, 1044, 
	1044, 1044, 1045, 1044, 1044, 1044, 1044, 1046, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1045, 1044, 1044, 1044, 1044, 1044, 1046, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1047, 1047, 
	1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1047, 
	1047, 1047, 1047, 1047, 1047, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1047, 
	1047, 1047, 1047, 1047, 1047, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1048, 1044, 1045, 1044, 1044, 
	1044, 1045, 1044, 1044, 1044, 1044, 1043, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1045, 
	1044, 1044, 1044, 1044, 1044, 1043, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1049, 1049, 
	1049, 1049, 1049, 1049, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1049, 1049, 
	1049, 1049, 1049, 1049, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1044, 1050, 1044, 1043, 1045, 1049, 1049, 
	1049, 1045, 1049, 1049, 1049, 1049, 1043, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1045, 
	1049, 1049, 1049, 1049, 1049, 1043, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 
	1049, 1049, 1043, 1049, 1051, 1045, 1052, 1052, 
	1052, 1045, 1052, 1052, 1052, 1052, 1046, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1045, 
	1052, 1052, 1052, 1052, 1052, 1046, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1053, 1053, 1053, 
	1053, 1053, 1053, 1053, 1053, 1053, 1053, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1053, 1053, 
	1053, 1053, 1053, 1053, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1053, 1053, 
	1053, 1053, 1053, 1053, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1043, 1052, 1045, 1052, 1052, 1052, 
	1045, 1052, 1052, 1052, 1052, 1043, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1045, 1052, 
	1052, 1052, 1052, 1052, 1043, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1049, 1049, 1049, 1049, 
	1049, 1049, 1049, 1049, 1049, 1049, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1049, 1049, 1049, 
	1049, 1049, 1049, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1049, 1049, 1049, 
	1049, 1049, 1049, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1045, 1052, 1045, 1052, 1052, 1052, 1045, 
	1052, 1052, 1052, 1052, 1054, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1045, 1052, 1052, 
	1052, 1052, 1052, 1054, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1055, 1055, 1055, 1055, 1055, 
	1055, 1055, 1055, 1055, 1055, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1055, 1055, 1055, 1055, 
	1055, 1055, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1055, 1055, 1055, 1055, 
	1055, 1055, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1056, 1052, 1045, 1052, 1052, 1052, 1045, 1052, 
	1052, 1052, 1052, 1054, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1045, 1052, 1052, 1052, 
	1052, 1052, 1054, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1053, 1053, 1053, 1053, 1053, 1053, 
	1053, 1053, 1053, 1053, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1053, 1053, 1053, 1053, 1053, 
	1053, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1053, 1053, 1053, 1053, 1053, 
	1053, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1056, 
	1052, 1057, 1045, 1052, 1052, 1052, 1045, 1052, 
	1052, 1052, 1052, 1054, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1045, 1052, 1052, 1052, 
	1052, 1052, 1054, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1058, 1058, 1058, 1058, 1058, 1058, 
	1058, 1058, 1058, 1058, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1058, 1058, 1058, 1058, 1058, 
	1058, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1058, 1058, 1058, 1058, 1058, 
	1058, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1056, 
	1052, 1045, 1052, 1052, 1052, 1045, 1052, 1052, 
	1052, 1052, 1054, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1045, 1052, 1052, 1052, 1052, 
	1052, 1054, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 
	1059, 1059, 1059, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1059, 1059, 1059, 1059, 1059, 1059, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1059, 1059, 1059, 1059, 1059, 1059, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1056, 1052, 
	1045, 1052, 1052, 1052, 1045, 1052, 1052, 1052, 
	1052, 1054, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1045, 1052, 1052, 1052, 1052, 1052, 
	1054, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 
	1060, 1060, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1060, 1060, 1060, 1060, 1060, 1060, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1060, 1060, 1060, 1060, 1060, 1060, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1056, 1052, 1045, 
	1052, 1052, 1052, 1045, 1052, 1052, 1052, 1052, 
	1054, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1045, 1052, 1052, 1052, 1052, 1052, 1054, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1061, 
	1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061, 
	1061, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1061, 1061, 1061, 1061, 1061, 1061, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1061, 1061, 1061, 1061, 1061, 1061, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1056, 1052, 1045, 1052, 
	1052, 1052, 1045, 1052, 1052, 1052, 1052, 1054, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1045, 1052, 1052, 1052, 1052, 1052, 1054, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1062, 
	1062, 1062, 1062, 1062, 1062, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1062, 
	1062, 1062, 1062, 1062, 1062, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1056, 1052, 1045, 1052, 1052, 
	1052, 1045, 1052, 1052, 1052, 1052, 1043, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1045, 
	1052, 1052, 1052, 1052, 1052, 1043, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1062, 1062, 
	1062, 1062, 1062, 1062, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1062, 1062, 
	1062, 1062, 1062, 1062, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1043, 1052, 1045, 1052, 1052, 1052, 
	1045, 1052, 1052, 1052, 1052, 1063, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1045, 1052, 
	1052, 1052, 1052, 1052, 1063, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1064, 1064, 1064, 1064, 
	1064, 1064, 1064, 1064, 1064, 1064, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1064, 1064, 1064, 
	1064, 1064, 1064, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1064, 1064, 1064, 
	1064, 1064, 1064, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1056, 1052, 1045, 1052, 1052, 1052, 1045, 
	1052, 1052, 1052, 1052, 1063, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1045, 1052, 1052, 
	1052, 1052, 1052, 1063, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1065, 1065, 1065, 1065, 1065, 
	1065, 1065, 1065, 1065, 1065, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1065, 1065, 1065, 1065, 
	1065, 1065, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1065, 1065, 1065, 1065, 
	1065, 1065, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1056, 1052, 1045, 1052, 1052, 1052, 1045, 1052, 
	1052, 1052, 1052, 1063, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1045, 1052, 1052, 1052, 
	1052, 1052, 1063, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1066, 1066, 1066, 1066, 1066, 1066, 
	1066, 1066, 1066, 1066, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1066, 1066, 1066, 1066, 1066, 
	1066, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1066, 1066, 1066, 1066, 1066, 
	1066, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1043, 
	1052, 1045, 1052, 1052, 1052, 1045, 1052, 1052, 
	1052, 1052, 1063, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1045, 1052, 1052, 1052, 1052, 
	1052, 1063, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 
	1067, 1067, 1067, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1067, 1067, 1067, 1067, 1067, 1067, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1067, 1067, 1067, 1067, 1067, 1067, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1043, 1052, 
	1045, 1052, 1052, 1052, 1045, 1052, 1052, 1052, 
	1052, 1063, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1045, 1052, 1052, 1052, 1052, 1052, 
	1063, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 
	1068, 1068, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1068, 1068, 1068, 1068, 1068, 1068, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1068, 1068, 1068, 1068, 1068, 1068, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1043, 1052, 1045, 
	1052, 1052, 1052, 1045, 1052, 1052, 1052, 1052, 
	1063, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1045, 1052, 1052, 1052, 1052, 1052, 1063, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1069, 
	1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 
	1069, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1069, 1069, 1069, 1069, 1069, 1069, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1069, 1069, 1069, 1069, 1069, 1069, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1043, 1052, 1045, 1052, 
	1052, 1052, 1045, 1052, 1052, 1052, 1052, 1063, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1045, 1052, 1052, 1052, 1052, 1052, 1063, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1070, 1070, 
	1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1070, 
	1070, 1070, 1070, 1070, 1070, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1070, 
	1070, 1070, 1070, 1070, 1070, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1043, 1052, 1045, 1052, 1052, 
	1052, 1045, 1052, 1052, 1052, 1052, 1063, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1045, 
	1052, 1052, 1052, 1052, 1052, 1063, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1062, 1062, 
	1062, 1062, 1062, 1062, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1062, 1062, 
	1062, 1062, 1062, 1062, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1043, 1052, 1045, 1052, 1052, 1052, 
	1045, 1052, 1052, 1052, 1052, 1063, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1045, 1052, 
	1052, 1052, 1052, 1052, 1063, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1071, 1071, 1071, 1071, 
	1071, 1071, 1071, 1071, 1071, 1071, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1071, 1071, 1071, 
	1071, 1071, 1071, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1071, 1071, 1071, 
	1071, 1071, 1071, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1056, 1052, 1045, 1052, 1052, 1052, 1045, 
	1052, 1052, 1052, 1052, 1063, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1045, 1052, 1052, 
	1052, 1052, 1052, 1063, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1072, 1072, 1072, 1072, 1072, 
	1072, 1072, 1072, 1072, 1072, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1072, 1072, 1072, 1072, 
	1072, 1072, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1072, 1072, 1072, 1072, 
	1072, 1072, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1056, 1052, 1045, 1052, 1052, 1052, 1045, 1052, 
	1052, 1052, 1052, 1063, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1045, 1052, 1052, 1052, 
	1052, 1052, 1063, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1073, 1073, 1073, 1073, 1073, 1073, 
	1073, 1073, 1073, 1073, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1073, 1073, 1073, 1073, 1073, 
	1073, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1073, 1073, 1073, 1073, 1073, 
	1073, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1056, 
	1052, 1045, 1052, 1052, 1052, 1045, 1052, 1052, 
	1052, 1052, 1063, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1045, 1052, 1052, 1052, 1052, 
	1052, 1063, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 
	1074, 1074, 1074, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1074, 1074, 1074, 1074, 1074, 1074, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1074, 1074, 1074, 1074, 1074, 1074, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1056, 1052, 
	1045, 1052, 1052, 1052, 1045, 1052, 1052, 1052, 
	1052, 1063, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1045, 1052, 1052, 1052, 1052, 1052, 
	1063, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1062, 1062, 1062, 1062, 1062, 1062, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1062, 1062, 1062, 1062, 1062, 1062, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1056, 1052, 1075, 
	1076, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 
	1078, 1078, 1078, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1078, 1078, 1078, 1078, 1078, 1078, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 
	1077, 1077, 1078, 1078, 1078, 1078, 1078, 1078, 
	1077, 1077, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 284, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 285, 201, 201, 286, 
	201, 284, 201, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 201, 201, 201, 
	201, 283, 201, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 201, 201, 201, 
	201, 201, 283, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 284, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 285, 927, 927, 
	286, 927, 284, 927, 283, 283, 283, 283, 
	1079, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 927, 927, 
	927, 927, 283, 927, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 927, 927, 
	927, 927, 927, 283, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 284, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 285, 927, 
	927, 286, 927, 284, 927, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 1080, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 927, 
	927, 927, 927, 283, 927, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 283, 
	283, 283, 283, 283, 283, 283, 283, 927, 
	927, 927, 927, 927, 283, 1081, 1082, 927, 
	922, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 905, 906, 906, 906, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 284, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 285, 905, 905, 286, 905, 
	284, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 907, 905, 905, 
	1083, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 905, 905, 905, 
	905, 861, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 905, 906, 906, 906, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 284, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 285, 905, 905, 286, 
	905, 284, 905, 861, 861, 861, 861, 1084, 
	1085, 861, 861, 861, 861, 861, 1086, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 907, 905, 
	905, 861, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 905, 905, 
	905, 905, 861, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 905, 906, 906, 
	906, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 284, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 285, 905, 905, 
	286, 905, 284, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 1087, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 907, 
	905, 905, 861, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 905, 
	905, 905, 905, 861, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 905, 906, 
	906, 906, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 284, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 285, 905, 
	905, 286, 905, 284, 905, 861, 861, 1088, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	907, 905, 905, 861, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	905, 905, 905, 905, 861, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 905, 
	906, 906, 906, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 284, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 285, 
	905, 905, 286, 905, 284, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 1089, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 907, 905, 905, 861, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 905, 905, 905, 905, 861, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	905, 906, 906, 906, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 284, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	285, 905, 905, 286, 905, 284, 905, 861, 
	861, 861, 1090, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 907, 905, 905, 861, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 905, 905, 905, 905, 861, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 905, 906, 906, 906, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	284, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 285, 905, 905, 286, 905, 284, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	1091, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 907, 905, 905, 861, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 905, 905, 905, 905, 861, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 905, 906, 906, 906, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 284, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 285, 905, 905, 286, 905, 284, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 1092, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 907, 905, 905, 861, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 905, 905, 905, 905, 
	861, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 905, 906, 906, 906, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 284, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 285, 905, 905, 286, 905, 
	284, 905, 861, 861, 861, 861, 861, 861, 
	1093, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 907, 905, 905, 
	861, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 905, 905, 905, 
	905, 861, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 905, 906, 906, 906, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 284, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 285, 905, 905, 286, 
	905, 284, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 907, 905, 
	905, 1094, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 905, 905, 
	905, 905, 861, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 905, 906, 906, 
	906, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 284, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 285, 905, 905, 
	286, 905, 284, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 907, 
	905, 905, 1095, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 905, 
	905, 905, 905, 861, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 284, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 285, 201, 
	201, 286, 201, 284, 201, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 201, 
	201, 201, 201, 861, 201, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 201, 
	201, 201, 201, 201, 861, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 905, 
	906, 906, 906, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 284, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 285, 
	905, 905, 286, 905, 284, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 1096, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 907, 905, 905, 861, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 905, 905, 905, 905, 861, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	905, 906, 906, 906, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 284, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	285, 905, 905, 286, 905, 284, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 1097, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 907, 905, 905, 861, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 905, 905, 905, 905, 861, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 905, 906, 906, 906, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	284, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 285, 905, 905, 286, 905, 284, 905, 
	861, 861, 861, 861, 1093, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 907, 905, 905, 861, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 905, 905, 905, 905, 861, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 905, 906, 906, 906, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 284, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 285, 905, 905, 286, 905, 284, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 1098, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 907, 905, 905, 861, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 905, 905, 905, 905, 
	861, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 905, 906, 906, 906, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 284, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 285, 905, 905, 286, 905, 
	284, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 1097, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 907, 905, 905, 
	861, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 905, 905, 905, 
	905, 861, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 905, 906, 906, 906, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 284, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 285, 905, 905, 286, 
	905, 284, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 907, 905, 
	905, 861, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 1099, 861, 
	1100, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 905, 905, 
	905, 905, 861, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 905, 906, 906, 
	906, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 284, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 285, 905, 905, 
	286, 905, 284, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 907, 
	905, 905, 861, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 1101, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 905, 
	905, 905, 905, 861, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 905, 906, 
	906, 906, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 284, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 285, 905, 
	905, 286, 905, 284, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	907, 905, 905, 861, 905, 1102, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	905, 905, 905, 905, 861, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 905, 
	906, 906, 906, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 284, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 285, 
	905, 905, 286, 905, 284, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 907, 905, 905, 861, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	1095, 861, 861, 861, 861, 861, 861, 861, 
	905, 905, 905, 905, 905, 861, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	905, 906, 906, 906, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 284, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	285, 905, 905, 286, 905, 284, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 907, 905, 905, 861, 905, 861, 
	861, 861, 1095, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 905, 905, 905, 905, 861, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 905, 906, 906, 906, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	284, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 285, 905, 905, 286, 905, 284, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 907, 905, 905, 861, 905, 
	861, 861, 861, 861, 1103, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 1104, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 905, 905, 905, 905, 861, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 905, 906, 906, 906, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 284, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 285, 905, 905, 286, 905, 284, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 907, 905, 905, 861, 
	905, 861, 861, 861, 861, 861, 861, 1105, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 905, 905, 905, 905, 
	861, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 905, 906, 906, 906, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 284, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 285, 905, 905, 286, 905, 
	284, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 907, 905, 905, 
	861, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 1106, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 905, 905, 905, 
	905, 861, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 905, 906, 906, 906, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 284, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 285, 905, 905, 286, 
	905, 284, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 907, 905, 
	905, 861, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	1095, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 905, 905, 
	905, 905, 861, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 905, 906, 906, 
	906, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 284, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 285, 905, 905, 
	286, 905, 284, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 907, 
	905, 905, 861, 905, 861, 861, 861, 861, 
	1107, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 905, 
	905, 905, 905, 861, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 905, 906, 
	906, 906, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 284, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 285, 905, 
	905, 286, 905, 284, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	907, 905, 905, 861, 905, 1108, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	905, 905, 905, 905, 861, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 905, 
	906, 906, 906, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 284, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 285, 
	905, 905, 286, 905, 284, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 907, 905, 905, 861, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	1095, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 905, 905, 905, 905, 861, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	905, 906, 906, 906, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 284, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	285, 905, 905, 286, 905, 284, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 907, 905, 905, 861, 905, 1109, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 1110, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 905, 905, 905, 905, 861, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 905, 906, 906, 906, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	284, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 285, 905, 905, 286, 905, 284, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 907, 905, 905, 861, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 1111, 861, 861, 861, 861, 861, 
	861, 861, 905, 905, 905, 905, 905, 861, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 905, 906, 906, 906, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 284, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 285, 905, 905, 286, 905, 284, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 907, 905, 905, 861, 
	905, 861, 861, 861, 861, 1095, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 905, 905, 905, 905, 
	861, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 905, 906, 906, 906, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 284, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 285, 905, 905, 286, 905, 
	284, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 907, 905, 905, 
	861, 905, 1112, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 905, 905, 905, 
	905, 861, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 905, 906, 906, 906, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 284, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 285, 905, 905, 286, 
	905, 284, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 907, 905, 
	905, 861, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 1102, 861, 861, 
	861, 861, 861, 861, 861, 905, 905, 905, 
	905, 905, 861, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 905, 906, 906, 
	906, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 284, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 285, 905, 905, 
	286, 905, 284, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 907, 
	905, 905, 861, 905, 861, 861, 861, 861, 
	1113, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 1095, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 905, 
	905, 905, 905, 861, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 905, 906, 
	906, 906, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 284, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 285, 905, 
	905, 286, 905, 284, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	907, 905, 905, 861, 905, 861, 861, 861, 
	861, 861, 1095, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	905, 905, 905, 905, 861, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 905, 
	906, 906, 906, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 284, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 285, 
	905, 905, 286, 905, 284, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 907, 905, 905, 861, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 1114, 861, 1115, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 905, 905, 905, 905, 861, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	905, 906, 906, 906, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 284, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	285, 905, 905, 286, 905, 284, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 907, 905, 905, 861, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 1116, 861, 861, 861, 861, 861, 861, 
	861, 905, 905, 905, 905, 905, 861, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 905, 906, 906, 906, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	284, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 285, 905, 905, 286, 905, 284, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 907, 905, 905, 861, 905, 
	861, 861, 861, 861, 1095, 861, 861, 861, 
	1113, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 905, 905, 905, 905, 861, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 905, 906, 906, 906, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 284, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 285, 905, 905, 286, 905, 284, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 907, 905, 905, 861, 
	905, 861, 861, 861, 1095, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 1117, 861, 861, 861, 861, 
	861, 861, 861, 905, 905, 905, 905, 905, 
	861, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 905, 906, 906, 906, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 284, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 285, 905, 905, 286, 905, 
	284, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 907, 905, 905, 
	861, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 1118, 861, 
	861, 861, 861, 861, 905, 905, 905, 905, 
	905, 861, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 905, 906, 906, 906, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 284, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 285, 905, 905, 286, 
	905, 284, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 907, 905, 
	905, 861, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 1111, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 905, 905, 
	905, 905, 861, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 905, 906, 906, 
	906, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 284, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 285, 905, 905, 
	286, 905, 284, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 907, 
	905, 905, 861, 905, 1119, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 896, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 905, 
	905, 905, 905, 861, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 905, 906, 
	906, 906, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 284, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 285, 905, 
	905, 286, 905, 284, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	907, 905, 905, 861, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	1109, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	905, 905, 905, 905, 861, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 905, 
	906, 906, 906, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 284, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 285, 
	905, 905, 286, 905, 284, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 907, 905, 905, 861, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 1095, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 905, 905, 905, 905, 861, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	905, 906, 906, 906, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 284, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	285, 905, 905, 286, 905, 284, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 907, 905, 905, 861, 905, 861, 
	861, 861, 861, 861, 1120, 861, 861, 861, 
	861, 861, 861, 861, 1095, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 905, 905, 905, 905, 861, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 905, 906, 906, 906, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	284, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 285, 905, 905, 286, 905, 284, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 907, 905, 905, 861, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 1121, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 905, 905, 905, 905, 861, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 905, 906, 906, 906, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 284, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 285, 905, 905, 286, 905, 284, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 907, 905, 905, 861, 
	905, 861, 861, 861, 1122, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 905, 905, 905, 905, 
	861, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 905, 906, 906, 906, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 284, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 285, 905, 905, 286, 905, 
	284, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 907, 905, 905, 
	861, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 1123, 861, 
	861, 861, 861, 861, 905, 905, 905, 905, 
	905, 861, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 905, 906, 906, 906, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 284, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 285, 905, 905, 286, 
	905, 284, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 907, 905, 
	905, 861, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 1111, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 905, 905, 
	905, 905, 861, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 905, 906, 906, 
	906, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 284, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 285, 905, 905, 
	286, 905, 284, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 907, 
	905, 905, 861, 905, 861, 861, 861, 861, 
	1124, 861, 861, 861, 1125, 861, 861, 861, 
	861, 861, 1126, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 905, 
	905, 905, 905, 861, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 905, 906, 
	906, 906, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 284, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 285, 905, 
	905, 286, 905, 284, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	907, 905, 905, 861, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 1126, 861, 861, 905, 
	905, 905, 905, 905, 861, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 905, 
	906, 906, 906, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 284, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 285, 
	905, 905, 286, 905, 284, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 907, 905, 905, 861, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 1095, 861, 861, 861, 861, 861, 861, 
	905, 905, 905, 905, 905, 861, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	905, 906, 906, 906, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 284, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	285, 905, 905, 286, 905, 284, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 907, 905, 905, 861, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 1095, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 905, 905, 905, 905, 861, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 905, 906, 906, 906, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	284, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 285, 905, 905, 286, 905, 284, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 907, 905, 905, 861, 905, 
	861, 861, 861, 861, 1127, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 905, 905, 905, 905, 861, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 905, 906, 906, 906, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 284, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 285, 905, 905, 286, 905, 284, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 907, 905, 905, 861, 
	905, 861, 861, 861, 1128, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 1129, 1130, 861, 861, 861, 
	861, 861, 861, 905, 905, 905, 905, 905, 
	861, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 905, 906, 906, 906, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 284, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 285, 905, 905, 286, 905, 
	284, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 907, 905, 905, 
	861, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	1095, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 905, 905, 905, 
	905, 861, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 905, 906, 906, 906, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 284, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 285, 905, 905, 286, 
	905, 284, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 907, 905, 
	905, 861, 905, 861, 861, 1131, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 905, 905, 
	905, 905, 861, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 905, 906, 906, 
	906, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 284, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 285, 905, 905, 
	286, 905, 284, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 907, 
	905, 905, 861, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	1132, 861, 861, 861, 861, 861, 905, 905, 
	905, 905, 905, 861, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 905, 906, 
	906, 906, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 284, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 285, 905, 
	905, 286, 905, 284, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	907, 905, 905, 861, 905, 861, 861, 861, 
	861, 1133, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	905, 905, 905, 905, 861, 1134, 1134, 1134, 
	1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 
	1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 
	1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 
	1134, 1134, 1134, 1134, 1134, 1134, 1136, 1134, 
	1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 
	1134, 1134, 1134, 1134, 1134, 1135, 1135, 1135, 
	1135, 1135, 1135, 1135, 1135, 1135, 1135, 1137, 
	1134, 1134, 1138, 1134, 1136, 1134, 1135, 1135, 
	1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 
	1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 
	1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 
	1134, 1134, 1134, 1134, 1135, 1134, 1135, 1135, 
	1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 
	1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 
	1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 
	1134, 1134, 1134, 1134, 1134, 1135, 913, 1139, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 915, 
	912, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 905, 906, 906, 906, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 284, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 285, 905, 905, 286, 905, 
	284, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 907, 905, 905, 
	861, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 1140, 861, 861, 1141, 861, 
	861, 861, 861, 861, 905, 905, 905, 905, 
	905, 861, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 905, 906, 906, 906, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 284, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 285, 905, 905, 286, 
	905, 284, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 907, 905, 
	905, 861, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 1095, 861, 905, 905, 905, 
	905, 905, 861, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 905, 906, 906, 
	906, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 284, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 285, 905, 905, 
	286, 905, 284, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 907, 
	905, 905, 861, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 1106, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 905, 
	905, 905, 905, 861, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 905, 906, 
	906, 906, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 284, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 285, 905, 
	905, 286, 905, 284, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	907, 905, 905, 861, 905, 861, 861, 861, 
	861, 1142, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 1143, 861, 861, 861, 861, 861, 905, 
	905, 905, 905, 905, 861, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 905, 
	906, 906, 906, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 284, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 285, 
	905, 905, 286, 905, 284, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 907, 905, 905, 861, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 1113, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 905, 905, 905, 905, 861, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	905, 906, 906, 906, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 284, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	285, 905, 905, 286, 905, 284, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 907, 905, 905, 861, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 1144, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 905, 905, 905, 905, 861, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 905, 906, 906, 906, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	284, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 285, 905, 905, 286, 905, 284, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 907, 905, 905, 861, 905, 
	861, 861, 861, 861, 896, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 905, 905, 905, 905, 861, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 905, 906, 906, 906, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 284, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 285, 905, 905, 286, 905, 284, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 907, 905, 905, 861, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	1145, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 1146, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 905, 905, 905, 905, 
	861, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 905, 906, 906, 906, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 284, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 285, 905, 905, 286, 905, 
	284, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 907, 905, 905, 
	861, 905, 861, 861, 861, 861, 1106, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 905, 905, 905, 
	905, 861, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 905, 906, 906, 906, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 284, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 285, 905, 905, 286, 
	905, 284, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 907, 905, 
	905, 861, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 1111, 
	861, 861, 861, 861, 861, 905, 905, 905, 
	905, 905, 861, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 905, 906, 906, 
	906, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 284, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 285, 905, 905, 
	286, 905, 284, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 907, 
	905, 905, 861, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 1147, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 905, 
	905, 905, 905, 861, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 905, 906, 
	906, 906, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 284, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 285, 905, 
	905, 286, 905, 284, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	907, 905, 905, 861, 905, 861, 861, 861, 
	1148, 861, 861, 861, 861, 861, 861, 861, 
	1149, 861, 861, 861, 861, 861, 861, 861, 
	1150, 861, 861, 861, 861, 861, 861, 905, 
	905, 905, 905, 905, 861, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 905, 
	906, 906, 906, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 284, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 285, 
	905, 905, 286, 905, 284, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 907, 905, 905, 861, 905, 861, 861, 
	861, 861, 1113, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 905, 905, 905, 905, 861, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	905, 906, 906, 906, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 284, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	285, 905, 905, 286, 905, 284, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 907, 905, 905, 861, 905, 861, 
	861, 861, 861, 1151, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 905, 905, 905, 905, 861, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 905, 906, 906, 906, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	284, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 285, 905, 905, 286, 905, 284, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 907, 905, 905, 861, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 1152, 861, 861, 861, 861, 861, 
	861, 861, 905, 905, 905, 905, 905, 861, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 905, 906, 906, 906, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 284, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 285, 905, 905, 286, 905, 284, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 907, 905, 905, 861, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 1120, 861, 861, 861, 861, 
	861, 861, 861, 905, 905, 905, 905, 905, 
	861, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 905, 906, 906, 906, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 284, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 285, 905, 905, 286, 905, 
	284, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 907, 905, 905, 
	861, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 1153, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 905, 905, 905, 
	905, 861, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 905, 906, 906, 906, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 284, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 285, 905, 905, 286, 
	905, 284, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 907, 905, 
	905, 861, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 1120, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 905, 905, 905, 
	905, 905, 861, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 905, 906, 906, 
	906, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 906, 284, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 285, 905, 905, 
	286, 905, 284, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 907, 
	905, 905, 861, 905, 861, 861, 861, 861, 
	861, 861, 861, 1154, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 905, 905, 
	905, 905, 905, 861, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 905, 906, 
	906, 906, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 906, 284, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 285, 905, 
	905, 286, 905, 284, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	907, 905, 905, 861, 905, 861, 861, 861, 
	861, 1106, 861, 861, 861, 1155, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 905, 
	905, 905, 905, 905, 861, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 905, 
	906, 906, 906, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 906, 284, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 285, 
	905, 905, 286, 905, 284, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 907, 905, 905, 861, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 1156, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	905, 905, 905, 905, 905, 861, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	905, 906, 906, 906, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 906, 284, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	285, 905, 905, 286, 905, 284, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 907, 905, 905, 861, 905, 861, 
	861, 861, 861, 1120, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 905, 905, 905, 905, 905, 861, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 905, 906, 906, 906, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 906, 
	284, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 285, 905, 905, 286, 905, 284, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 907, 905, 905, 861, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	1157, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 905, 905, 905, 905, 905, 861, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 905, 906, 906, 906, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	906, 284, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 285, 905, 905, 286, 905, 284, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 907, 905, 905, 861, 
	905, 861, 861, 861, 861, 1158, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 905, 905, 905, 905, 905, 
	861, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 906, 905, 906, 906, 906, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 284, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 285, 905, 905, 286, 905, 
	284, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 907, 905, 905, 
	861, 905, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 1100, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 905, 905, 905, 905, 
	905, 861, 1159, 212, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 927, 927, 927, 927, 927, 927, 
	927, 927, 937, 927, 1161, 1160, 1160, 1160, 
	1161, 1160, 1160, 1160, 1160, 1162, 1163, 1162, 
	1162, 1162, 1160, 1160, 1160, 1160, 1160, 1160, 
	1160, 1160, 1160, 1160, 1160, 1160, 1161, 1160, 
	1160, 1160, 1160, 1160, 1162, 1160, 1160, 1164, 
	1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 
	1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 
	1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 
	1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 
	1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 
	1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 
	1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 
	1165, 1160, 1162, 1166, 1162, 1162, 1162, 1166, 
	1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 
	1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 
	1166, 1162, 1166, 1167, 1168, 1169, 1170, 1171, 
	1173, 1172, 1174, 1176, 1177, 1177, 1177, 1176, 
	1177, 1177, 1177, 1177, 1178, 1179, 1178, 1178, 
	1178, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 
	1177, 1177, 1177, 1177, 1177, 1176, 1177, 1177, 
	1177, 1177, 1177, 1178, 1177, 1180, 1181, 1177, 
	1177, 1177, 1180, 1177, 1177, 1177, 1177, 1177, 
	1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 
	1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 
	1177, 1177, 1177, 1177, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1177, 1182, 
	1177, 1177, 1175, 1177, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1177, 1177, 
	1177, 1177, 1177, 1175, 1183, 1183, 1183, 1183, 
	1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 
	1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 
	1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 
	1183, 1183, 1183, 1183, 1183, 292, 1183, 1183, 
	1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 
	1183, 1183, 1183, 1183, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 293, 1183, 
	1183, 1183, 1183, 292, 1183, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 1183, 
	1183, 1183, 1183, 291, 1183, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 291, 
	291, 291, 291, 291, 291, 291, 291, 1183, 
	1183, 1183, 1183, 1183, 291, 1178, 1184, 1178, 
	1178, 1178, 1184, 1184, 1184, 1184, 1184, 1184, 
	1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 
	1184, 1184, 1184, 1184, 1178, 1184, 1185, 1186, 
	1187, 1188, 1189, 1190, 1183, 1191, 1193, 1194, 
	1194, 1194, 1193, 1194, 1194, 1194, 1194, 1195, 
	1196, 1195, 1195, 1195, 1194, 1194, 1194, 1194, 
	1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 
	1193, 1194, 1194, 1194, 1194, 1194, 1195, 1197, 
	1198, 1199, 1200, 1201, 1202, 1198, 1203, 1204, 
	1205, 1201, 1206, 1207, 1208, 1201, 1209, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 
	1219, 1218, 1218, 1220, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1221, 1222, 1223, 1201, 1224, 1198, 1225, 
	1226, 1227, 1228, 1229, 1230, 1192, 1192, 1231, 
	1192, 1192, 1192, 1232, 1233, 1234, 1192, 1192, 
	1235, 1236, 1237, 1238, 1192, 1239, 1192, 1240, 
	1192, 1241, 1242, 1243, 1244, 1194, 1192, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	1245, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 301, 301, 301, 301, 301, 1245, 301, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 301, 301, 301, 301, 1192, 301, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 301, 301, 301, 301, 301, 1192, 
	1247, 1246, 1248, 1195, 1249, 1195, 1195, 1195, 
	1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 
	1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 
	1249, 1249, 1195, 1249, 1250, 1252, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1252, 1251, 
	1253, 1254, 1255, 1256, 1257, 1257, 1257, 1257, 
	1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 
	1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 
	1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 
	1257, 1257, 1257, 1257, 1257, 296, 296, 1257, 
	296, 1257, 296, 296, 1257, 1257, 296, 296, 
	296, 1258, 296, 296, 1259, 1259, 1259, 1259, 
	1259, 1259, 1259, 1259, 1259, 1259, 296, 296, 
	296, 296, 296, 296, 296, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 1257, 
	296, 1257, 1257, 314, 296, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 1257, 
	1257, 1257, 296, 1257, 314, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	1260, 1260, 1260, 1260, 314, 1260, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	1260, 1260, 1260, 1260, 1260, 314, 1259, 1259, 
	1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 
	1260, 1261, 301, 1201, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1263, 1262, 1262, 1262, 1262, 
	1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 
	1262, 1262, 1261, 1262, 1264, 1265, 1201, 1266, 
	1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 
	1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 
	1266, 1261, 1266, 1261, 1267, 1262, 1269, 1268, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 1270, 1268, 1206, 1271, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1273, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1274, 1272, 1272, 
	1272, 1272, 1272, 1273, 1272, 299, 299, 299, 
	299, 299, 299, 299, 299, 299, 299, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 298, 1272, 1275, 301, 
	1275, 1275, 1275, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 1275, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 1276, 301, 1278, 1277, 1278, 1278, 1278, 
	1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 
	1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 
	1277, 1277, 1278, 1277, 1277, 1277, 1277, 1277, 
	1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 
	1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 
	1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 
	1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 
	1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 
	1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277, 
	1277, 1277, 1277, 1277, 1277, 1277, 1279, 1277, 
	1281, 1280, 1282, 1282, 1282, 1282, 1282, 1282, 
	1282, 1282, 1282, 1282, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1283, 1280, 1284, 1285, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1286, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1287, 1280, 1280, 1280, 1280, 1280, 
	1280, 1288, 1280, 1280, 1283, 1280, 1284, 1285, 
	1280, 1280, 1280, 1289, 1280, 1280, 1280, 1280, 
	1280, 1286, 1280, 1280, 1290, 1280, 1280, 1280, 
	1280, 1280, 1287, 1280, 303, 303, 303, 303, 
	303, 303, 303, 303, 303, 303, 1291, 1291, 
	1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 
	1291, 1292, 1291, 1291, 1291, 1291, 1291, 1291, 
	1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 
	1291, 1291, 1291, 1291, 1291, 1291, 1291, 1291, 
	1291, 1291, 1291, 1293, 1291, 1291, 1291, 1291, 
	1291, 1292, 1291, 1291, 1291, 1294, 1291, 1291, 
	1291, 1291, 1291, 1291, 1291, 1291, 1295, 1291, 
	1296, 301, 1296, 301, 301, 304, 304, 304, 
	304, 304, 304, 304, 304, 304, 304, 301, 
	304, 304, 304, 304, 304, 304, 304, 304, 
	304, 304, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1296, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1298, 1297, 1300, 1299, 1301, 1303, 1302, 
	1302, 1302, 1304, 1302, 1305, 1306, 1282, 1282, 
	1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1288, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1289, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1290, 1280, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1308, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1289, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1290, 1280, 1310, 1310, 
	1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1311, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1312, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1313, 1309, 1310, 1310, 1310, 1310, 1310, 1310, 
	1310, 1310, 1310, 1310, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1314, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1312, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1313, 1309, 1312, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1313, 
	1309, 1316, 1315, 1317, 1319, 1318, 1318, 1318, 
	1320, 1318, 1322, 1321, 1323, 1324, 1326, 1326, 
	1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 
	1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 
	1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 
	1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 
	1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 
	1325, 1325, 1325, 1325, 1325, 1327, 1325, 1325, 
	1325, 1325, 1325, 1325, 1325, 1325, 1325, 1328, 
	1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 
	1329, 1325, 1330, 1330, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1331, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1312, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1313, 1309, 1330, 1330, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1314, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1312, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1313, 1309, 1333, 1333, 1333, 1333, 1333, 1333, 
	1333, 1333, 1333, 1333, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1334, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1335, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1336, 1332, 1338, 1338, 
	1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 
	1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 
	1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 
	1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 
	1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 
	1337, 1337, 1337, 1337, 1337, 1339, 1337, 1337, 
	1337, 1337, 1337, 1337, 1337, 1337, 1337, 1340, 
	1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 
	1341, 1337, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1343, 1343, 1343, 1343, 1343, 
	1343, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1344, 1342, 1343, 1343, 1343, 1343, 1343, 
	1343, 1342, 1342, 1345, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1346, 1342, 1347, 1347, 
	1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1347, 
	1347, 1347, 1347, 1347, 1347, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1348, 1309, 1347, 
	1347, 1347, 1347, 1347, 1347, 1309, 1309, 1312, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1313, 1309, 1347, 1347, 1347, 1347, 1347, 1347, 
	1347, 1347, 1347, 1347, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1347, 1347, 1347, 1347, 1347, 
	1347, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1314, 1309, 1347, 1347, 1347, 1347, 1347, 
	1347, 1309, 1309, 1312, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1313, 1309, 1350, 1349, 
	1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 
	1351, 1351, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1352, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1353, 
	1349, 1349, 1349, 1349, 1349, 1352, 1349, 1349, 
	1349, 1354, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1355, 1349, 1356, 1356, 1356, 1356, 
	1356, 1356, 1356, 1356, 1356, 1356, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1357, 1349, 1349, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1354, 1349, 1349, 
	1349, 1349, 1349, 1349, 1349, 1349, 1355, 1349, 
	1358, 1309, 1359, 1359, 1359, 1359, 1359, 1359, 
	1359, 1359, 1359, 1359, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1360, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1361, 1309, 1309, 1309, 1309, 1309, 1360, 
	1309, 1309, 1309, 1312, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1313, 1309, 1359, 1359, 
	1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1314, 1309, 1309, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1312, 
	1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 
	1313, 1309, 1263, 1271, 1201, 1362, 1262, 1252, 
	1262, 1363, 1364, 1271, 1271, 1271, 1271, 1271, 
	1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 
	1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 
	1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 
	1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 
	1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 
	1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 
	1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 
	1271, 1271, 1252, 1271, 1252, 1262, 1252, 1201, 
	1262, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 
	1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 
	1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 
	1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 
	1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 
	1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 
	1257, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 1257, 1257, 1257, 1257, 1257, 
	1257, 1365, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 1257, 1257, 1257, 1257, 
	314, 1257, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 314, 314, 314, 314, 
	314, 314, 314, 314, 1257, 1257, 1257, 1257, 
	1257, 314, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 1245, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1366, 301, 301, 301, 
	301, 1245, 301, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 301, 301, 301, 
	301, 1218, 301, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 301, 301, 301, 
	301, 301, 1218, 1367, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1245, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1366, 1368, 
	1368, 1368, 1368, 1245, 1368, 1218, 1218, 1218, 
	1218, 1369, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1368, 
	1368, 1368, 1368, 1218, 1368, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1368, 
	1368, 1368, 1368, 1368, 1218, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1245, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1366, 
	1368, 1368, 1368, 1368, 1245, 1368, 1218, 1218, 
	1218, 1218, 1218, 1218, 1370, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1368, 1368, 1368, 1368, 1218, 1368, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1368, 1368, 1368, 1368, 1368, 1218, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1245, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1366, 1368, 1368, 1368, 1368, 1245, 1368, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1371, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1368, 1368, 1368, 1368, 1218, 1368, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1368, 1368, 1368, 1368, 1368, 1218, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1245, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1366, 1368, 1368, 1368, 1368, 1245, 1368, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1372, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1368, 1368, 1368, 1368, 1218, 1368, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1368, 1368, 1368, 1368, 1368, 1218, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1245, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1366, 1368, 1368, 1368, 1368, 1245, 
	1368, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1373, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1368, 1368, 1368, 1368, 1218, 
	1368, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1368, 1368, 1368, 1368, 1368, 
	1218, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1245, 1368, 1368, 1368, 1368, 1368, 
	1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 
	1368, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1366, 1368, 1368, 1368, 1368, 
	1245, 1368, 1218, 1218, 1218, 1372, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1368, 1368, 1368, 1368, 
	1218, 1368, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1368, 1368, 1368, 1368, 
	1368, 1218, 1374, 1376, 1375, 1377, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1379, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1192, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1192, 1192, 1192, 1192, 1380, 1381, 1192, 1192, 
	1192, 1192, 1192, 1382, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1192, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1192, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1383, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1192, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1192, 1192, 1384, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1192, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1192, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1385, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1192, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1192, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1192, 1192, 1192, 1386, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1192, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1192, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1387, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1192, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1192, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1388, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1192, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1192, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1389, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1192, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1192, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1390, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1192, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1391, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1392, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1192, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1192, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1393, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1192, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1192, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1192, 1192, 1192, 1192, 
	1394, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1192, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1192, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1395, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1192, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1396, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1192, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1397, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1192, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1192, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1393, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1192, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1192, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1192, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1398, 1192, 1399, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1192, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1400, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1192, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1192, 1378, 1401, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1192, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1192, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1402, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1192, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1192, 1378, 1192, 1192, 1192, 
	1403, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1192, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1192, 1378, 1192, 1192, 
	1192, 1192, 1404, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1405, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1192, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1192, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1406, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1192, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1192, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1407, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1192, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1192, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1403, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1192, 1378, 1192, 1192, 1192, 1192, 1408, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1192, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1192, 1378, 1409, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1192, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1192, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1410, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1192, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1192, 1378, 1411, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1412, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1192, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1192, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1413, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1192, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1192, 1378, 1192, 
	1192, 1192, 1192, 1403, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1192, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1192, 1378, 
	1414, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1192, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1192, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1415, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1192, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1416, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1192, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 316, 317, 316, 316, 316, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 316, 1245, 1417, 318, 1417, 1417, 
	1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 
	1417, 1417, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1417, 1417, 319, 1417, 
	1417, 1245, 1417, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1417, 320, 1417, 
	1417, 1192, 1417, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1417, 1417, 1417, 
	1417, 1417, 1192, 333, 334, 333, 333, 333, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 333, 332, 332, 335, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 338, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 332, 332, 
	332, 332, 332, 332, 332, 332, 337, 332, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1192, 
	1378, 1192, 1192, 1192, 1192, 1419, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1420, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1192, 1378, 1192, 1192, 1192, 1192, 1192, 1421, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1192, 1422, 1422, 1422, 1422, 1422, 1422, 
	1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 
	1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 
	1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 
	1422, 1422, 1422, 1245, 1422, 1422, 1422, 1422, 
	1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 
	1422, 1422, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1422, 1422, 1422, 1422, 
	1422, 1245, 1422, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1422, 1422, 1422, 
	1422, 1192, 1422, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1423, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1422, 1422, 1422, 
	1422, 1422, 1192, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1192, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1424, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1192, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1192, 1378, 1192, 1192, 1192, 
	1192, 1425, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1192, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1192, 1378, 1192, 1192, 
	1192, 1426, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1192, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1427, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1192, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1192, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1192, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1428, 1192, 1429, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1192, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1192, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1430, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1192, 1378, 1192, 1192, 1192, 1192, 1403, 1192, 
	1192, 1192, 1431, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1192, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1192, 1378, 1192, 1192, 1192, 1192, 1192, 
	1403, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1192, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1192, 1378, 1192, 1192, 1192, 1396, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1432, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1192, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1192, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1433, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1192, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1192, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1413, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1192, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1192, 1378, 1434, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1234, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1192, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1192, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1435, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1192, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1192, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1436, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1192, 1378, 1192, 1192, 1192, 1192, 1396, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1192, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1192, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1403, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1192, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1192, 1378, 1192, 1192, 1192, 1192, 
	1192, 1437, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1403, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1192, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1192, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1438, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1192, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1192, 1378, 1192, 1192, 
	1192, 1439, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1192, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1192, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1440, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1192, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1192, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1413, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1192, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1192, 
	1378, 1192, 1192, 1192, 1192, 1441, 1192, 1192, 
	1192, 1442, 1192, 1192, 1192, 1192, 1192, 1443, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1192, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1444, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1192, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1192, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1410, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1192, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1192, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1396, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1192, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1192, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1445, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1192, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1192, 1378, 1192, 1192, 
	1192, 1192, 1446, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1192, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1192, 1378, 1192, 
	1192, 1192, 1447, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1448, 1449, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1192, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1192, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1396, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1192, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1192, 
	1378, 1192, 1192, 1450, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1192, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1451, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1192, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1192, 1378, 1192, 1192, 1192, 1192, 1437, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1192, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1192, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1452, 1192, 1192, 
	1453, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1192, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1192, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1396, 1192, 1378, 
	1378, 1378, 1378, 1378, 1192, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1192, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1454, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1192, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1192, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1410, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1192, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1192, 1378, 
	1192, 1192, 1192, 1192, 1455, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1456, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1192, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1192, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1457, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1192, 1378, 1192, 1192, 1192, 1192, 1192, 1396, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1192, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1192, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1458, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1192, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1192, 1378, 1192, 1192, 1192, 1192, 
	1459, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1192, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1192, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1445, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1192, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1192, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1460, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1461, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1192, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1192, 1378, 1192, 
	1192, 1192, 1192, 1407, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1192, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1192, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1436, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1192, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1192, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1462, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1192, 1378, 1192, 1192, 1192, 1463, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1464, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1465, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1192, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1192, 1378, 1192, 1192, 1192, 1192, 1466, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1192, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1192, 1378, 1192, 1192, 1192, 1192, 
	1192, 1402, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1192, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1192, 1378, 1192, 1192, 1192, 
	1192, 1467, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1192, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1192, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1468, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1192, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1192, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1437, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1192, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1192, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1469, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1192, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1192, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1437, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1192, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1470, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1192, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1192, 1378, 1192, 1192, 1192, 1192, 1407, 
	1192, 1192, 1192, 1471, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1192, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1378, 1378, 1378, 
	1378, 1378, 1245, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1192, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1472, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1192, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1378, 1378, 
	1378, 1378, 1378, 1245, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1192, 1378, 1192, 1192, 1192, 
	1192, 1437, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1192, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1378, 
	1378, 1378, 1378, 1378, 1245, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1192, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1473, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1192, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1378, 1378, 1378, 1378, 1378, 1245, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1192, 1378, 1192, 
	1192, 1192, 1192, 1474, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1192, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1245, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1378, 1378, 1378, 1378, 1378, 1245, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1192, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1475, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1192, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1245, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1378, 1378, 1378, 1378, 1378, 1245, 
	1378, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1192, 
	1378, 1192, 1192, 1192, 1445, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1378, 1378, 1378, 1378, 1378, 
	1192, 1476, 1261, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1201, 1251, 1477, 1479, 1478, 1479, 1479, 
	1479, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 
	1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 
	1478, 1478, 1478, 1479, 1478, 1478, 1480, 1478, 
	1478, 1481, 1478, 1478, 1478, 1478, 1478, 1478, 
	1478, 345, 1478, 1478, 1478, 1478, 1478, 1478, 
	1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 
	1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 
	1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 
	1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 
	1478, 1478, 1478, 1478, 1478, 1478, 1478, 1482, 
	1478, 342, 343, 342, 342, 342, 1483, 1483, 
	1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 
	1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 
	342, 1483, 1483, 1483, 1483, 1483, 344, 1483, 
	1483, 1483, 1483, 1483, 1483, 1483, 345, 1483, 
	347, 1484, 347, 347, 347, 1484, 1484, 1484, 
	1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 
	1484, 1484, 1484, 1484, 1484, 1484, 1484, 347, 
	1484, 1484, 1485, 1484, 1484, 1484, 1484, 1484, 
	1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 
	1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 
	1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 
	1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 
	1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 
	1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 
	1484, 1484, 1484, 1486, 1484, 349, 348, 355, 
	1483, 353, 1483, 1488, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1489, 1487, 
	1488, 1487, 1488, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1491, 1487, 1488, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1492, 1487, 1488, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 
	1487, 1487, 1487, 1487, 1487, 1487, 1487, 1493, 
	1487, 1495, 1493, 0
]

class << self
	attr_accessor :_lex_trans_targs
	private :_lex_trans_targs, :_lex_trans_targs=
end
self._lex_trans_targs = [
	186, 2, 3, 4, 192, 6, 7, 8, 
	9, 10, 186, 186, 195, 198, 195, 12, 
	199, 14, 195, 206, 207, 210, 211, 217, 
	212, 213, 214, 19, 215, 216, 219, 221, 
	222, 223, 224, 225, 25, 18, 208, 209, 
	27, 248, 249, 251, 253, 251, 30, 254, 
	32, 251, 261, 262, 265, 266, 272, 267, 
	268, 269, 37, 270, 271, 274, 276, 277, 
	278, 279, 280, 43, 36, 263, 264, 45, 
	303, 304, 311, 313, 311, 48, 314, 50, 
	316, 319, 316, 52, 320, 54, 326, 325, 
	0, 56, 327, 328, 329, 58, 330, 331, 
	331, 331, 331, 444, 61, 62, 63, 444, 
	472, 64, 65, 472, 472, 476, 476, 69, 
	64, 70, 474, 475, 477, 478, 476, 472, 
	479, 480, 482, 66, 67, 483, 484, 68, 
	476, 71, 72, 77, 84, 486, 487, 70, 
	474, 475, 477, 478, 476, 472, 479, 480, 
	482, 66, 67, 483, 484, 68, 71, 72, 
	77, 84, 486, 487, 485, 73, 74, 75, 
	76, 78, 79, 82, 80, 81, 83, 85, 
	86, 472, 88, 89, 90, 92, 95, 93, 
	94, 96, 98, 503, 503, 503, 504, 100, 
	506, 101, 507, 102, 504, 100, 506, 101, 
	507, 541, 103, 541, 104, 105, 103, 541, 
	104, 541, 541, 541, 108, 109, 110, 111, 
	552, 541, 541, 557, 541, 114, 115, 116, 
	541, 119, 114, 115, 116, 541, 119, 117, 
	117, 115, 116, 563, 118, 117, 117, 115, 
	116, 563, 118, 115, 541, 579, 541, 121, 
	580, 586, 125, 595, 596, 130, 131, 125, 
	126, 594, 126, 594, 541, 127, 128, 129, 
	597, 132, 541, 611, 612, 615, 616, 622, 
	617, 618, 619, 137, 620, 621, 624, 626, 
	627, 628, 629, 630, 143, 136, 613, 614, 
	145, 666, 667, 147, 543, 106, 545, 149, 
	150, 669, 771, 152, 153, 154, 771, 779, 
	779, 779, 157, 800, 799, 779, 802, 804, 
	806, 779, 163, 164, 165, 810, 779, 167, 
	168, 821, 789, 843, 171, 172, 173, 177, 
	178, 171, 172, 173, 177, 178, 174, 174, 
	172, 173, 175, 176, 174, 174, 172, 173, 
	175, 176, 890, 172, 779, 959, 179, 961, 
	185, 959, 959, 180, 182, 961, 959, 182, 
	961, 184, 961, 959, 186, 186, 187, 188, 
	189, 191, 193, 194, 186, 186, 186, 190, 
	186, 190, 186, 1, 186, 186, 186, 5, 
	195, 195, 196, 195, 197, 200, 195, 195, 
	11, 13, 195, 195, 195, 201, 202, 203, 
	15, 21, 26, 226, 28, 195, 195, 195, 
	204, 205, 195, 16, 195, 195, 195, 17, 
	195, 195, 195, 20, 218, 220, 22, 195, 
	195, 23, 24, 195, 227, 231, 228, 229, 
	230, 195, 195, 232, 233, 236, 238, 247, 
	234, 235, 195, 237, 239, 241, 240, 195, 
	242, 243, 244, 245, 246, 195, 195, 195, 
	250, 251, 251, 251, 252, 255, 251, 29, 
	31, 251, 251, 251, 256, 257, 258, 33, 
	39, 44, 281, 46, 251, 251, 251, 259, 
	260, 251, 34, 251, 251, 251, 35, 251, 
	251, 251, 38, 273, 275, 40, 251, 251, 
	41, 42, 251, 282, 286, 283, 284, 285, 
	251, 251, 287, 288, 291, 293, 302, 289, 
	290, 251, 292, 294, 296, 295, 251, 297, 
	298, 299, 300, 301, 251, 251, 251, 305, 
	306, 306, 307, 306, 308, 306, 306, 306, 
	309, 309, 309, 310, 309, 309, 309, 311, 
	311, 311, 312, 311, 47, 49, 311, 311, 
	315, 315, 315, 316, 316, 317, 316, 318, 
	316, 316, 51, 53, 316, 316, 321, 321, 
	322, 321, 321, 323, 324, 323, 55, 57, 
	325, 325, 325, 325, 332, 331, 331, 333, 
	334, 335, 336, 338, 341, 342, 343, 344, 
	331, 345, 346, 348, 350, 351, 352, 356, 
	358, 359, 360, 376, 381, 388, 393, 400, 
	407, 410, 411, 415, 409, 419, 427, 431, 
	433, 438, 440, 443, 331, 331, 331, 331, 
	331, 331, 337, 331, 337, 331, 339, 59, 
	340, 331, 60, 331, 331, 347, 349, 331, 
	353, 354, 355, 351, 357, 331, 361, 362, 
	371, 374, 363, 364, 365, 366, 367, 368, 
	369, 370, 332, 372, 373, 375, 377, 380, 
	378, 379, 382, 385, 383, 384, 386, 387, 
	389, 391, 390, 392, 394, 395, 331, 396, 
	397, 398, 399, 331, 401, 404, 402, 403, 
	405, 406, 408, 412, 413, 414, 416, 418, 
	417, 420, 421, 422, 424, 423, 425, 426, 
	428, 429, 430, 432, 434, 435, 436, 437, 
	439, 441, 442, 445, 444, 444, 446, 447, 
	449, 444, 444, 444, 448, 444, 448, 450, 
	444, 452, 451, 451, 455, 456, 457, 458, 
	451, 460, 461, 462, 463, 465, 467, 468, 
	469, 470, 471, 451, 453, 451, 454, 451, 
	451, 451, 451, 451, 459, 451, 459, 464, 
	451, 466, 451, 472, 472, 473, 488, 489, 
	475, 491, 492, 479, 493, 494, 495, 496, 
	497, 499, 500, 501, 502, 472, 472, 472, 
	472, 472, 472, 476, 481, 472, 472, 472, 
	472, 472, 472, 472, 472, 472, 490, 472, 
	490, 472, 472, 472, 472, 498, 472, 87, 
	91, 97, 503, 505, 508, 99, 503, 503, 
	504, 509, 509, 510, 511, 513, 515, 516, 
	509, 509, 512, 509, 512, 509, 514, 509, 
	509, 509, 518, 517, 517, 519, 520, 521, 
	523, 525, 526, 531, 538, 517, 517, 517, 
	517, 522, 517, 522, 517, 524, 517, 517, 
	518, 527, 528, 529, 530, 532, 533, 536, 
	534, 535, 537, 539, 540, 542, 541, 550, 
	551, 553, 554, 556, 558, 559, 560, 562, 
	564, 565, 567, 568, 593, 599, 600, 601, 
	669, 670, 671, 672, 673, 561, 675, 692, 
	697, 704, 709, 711, 717, 720, 721, 725, 
	719, 729, 740, 744, 747, 755, 759, 762, 
	763, 541, 103, 104, 541, 106, 544, 541, 
	541, 546, 548, 549, 541, 547, 541, 541, 
	541, 541, 541, 107, 541, 541, 541, 541, 
	541, 555, 541, 555, 541, 541, 112, 541, 
	541, 113, 541, 541, 561, 541, 566, 541, 
	541, 541, 569, 578, 541, 120, 581, 582, 
	583, 541, 584, 122, 587, 588, 123, 591, 
	592, 541, 570, 572, 541, 571, 541, 541, 
	573, 576, 577, 541, 574, 575, 541, 541, 
	541, 541, 541, 541, 585, 541, 579, 589, 
	590, 541, 589, 541, 579, 589, 124, 598, 
	541, 541, 541, 602, 541, 541, 541, 603, 
	605, 541, 604, 541, 604, 541, 606, 607, 
	608, 133, 139, 144, 631, 146, 541, 541, 
	541, 609, 610, 541, 134, 541, 541, 541, 
	135, 541, 541, 541, 138, 623, 625, 140, 
	541, 541, 141, 142, 541, 632, 636, 633, 
	634, 635, 541, 541, 637, 638, 641, 652, 
	665, 639, 640, 541, 642, 643, 644, 646, 
	645, 541, 647, 648, 649, 650, 651, 653, 
	660, 654, 655, 656, 657, 658, 659, 661, 
	662, 663, 664, 541, 541, 541, 668, 148, 
	151, 541, 674, 676, 677, 687, 690, 678, 
	679, 680, 681, 682, 683, 684, 685, 686, 
	688, 689, 691, 693, 696, 694, 695, 698, 
	701, 699, 700, 702, 703, 705, 707, 706, 
	708, 710, 712, 714, 713, 715, 716, 718, 
	686, 722, 723, 724, 726, 728, 727, 730, 
	731, 732, 737, 733, 734, 735, 541, 542, 
	543, 106, 736, 548, 738, 739, 741, 742, 
	743, 745, 746, 748, 749, 750, 753, 751, 
	752, 754, 756, 757, 758, 760, 761, 541, 
	764, 764, 765, 766, 767, 769, 764, 764, 
	764, 768, 764, 768, 764, 770, 764, 772, 
	771, 771, 773, 774, 771, 775, 777, 771, 
	771, 771, 771, 776, 771, 776, 778, 771, 
	780, 779, 779, 783, 784, 785, 779, 786, 
	788, 791, 792, 793, 794, 795, 779, 796, 
	797, 803, 831, 835, 779, 836, 838, 840, 
	779, 841, 842, 844, 848, 850, 851, 779, 
	853, 871, 876, 883, 891, 898, 905, 910, 
	911, 915, 909, 920, 930, 936, 939, 948, 
	952, 956, 957, 958, 791, 781, 779, 782, 
	779, 779, 779, 779, 779, 779, 787, 779, 
	787, 779, 155, 790, 779, 779, 779, 779, 
	779, 779, 779, 779, 779, 798, 801, 779, 
	779, 156, 158, 801, 159, 779, 801, 159, 
	779, 160, 812, 823, 826, 805, 827, 828, 
	813, 817, 819, 779, 805, 160, 807, 809, 
	161, 779, 807, 779, 808, 779, 779, 162, 
	811, 779, 779, 814, 816, 779, 814, 815, 
	817, 819, 816, 779, 818, 779, 779, 820, 
	822, 779, 166, 779, 779, 779, 824, 816, 
	817, 819, 824, 825, 779, 814, 816, 817, 
	819, 779, 814, 816, 817, 819, 779, 829, 
	816, 817, 819, 829, 830, 779, 160, 831, 
	805, 832, 817, 819, 833, 816, 160, 833, 
	805, 834, 837, 839, 779, 169, 170, 779, 
	779, 845, 846, 847, 842, 849, 779, 779, 
	852, 779, 779, 854, 855, 864, 869, 856, 
	857, 858, 859, 860, 861, 862, 863, 780, 
	865, 866, 867, 868, 780, 870, 872, 875, 
	873, 874, 780, 780, 877, 880, 878, 879, 
	881, 882, 780, 884, 886, 885, 887, 888, 
	889, 779, 779, 892, 780, 893, 779, 894, 
	895, 896, 897, 781, 899, 902, 900, 901, 
	903, 904, 906, 907, 908, 780, 912, 913, 
	914, 916, 918, 919, 917, 780, 921, 922, 
	923, 926, 924, 925, 927, 928, 929, 931, 
	933, 932, 934, 935, 937, 938, 940, 941, 
	943, 946, 942, 944, 945, 947, 949, 950, 
	951, 953, 954, 955, 779, 779, 959, 960, 
	962, 963, 964, 959, 959, 181, 183, 966, 
	965, 967, 965, 968, 969, 970, 965, 965
]

class << self
	attr_accessor :_lex_trans_actions
	private :_lex_trans_actions, :_lex_trans_actions=
end
self._lex_trans_actions = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 6, 0, 7, 0, 8, 0, 
	7, 0, 0, 0, 0, 8, 7, 0, 
	8, 0, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 10, 0, 0, 
	0, 11, 0, 7, 0, 8, 0, 7, 
	0, 0, 0, 0, 8, 7, 0, 8, 
	0, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 13, 0, 0, 0, 
	14, 0, 15, 0, 0, 0, 0, 16, 
	0, 0, 0, 0, 0, 0, 0, 17, 
	18, 19, 20, 21, 0, 0, 0, 22, 
	23, 0, 0, 24, 25, 26, 27, 28, 
	29, 29, 30, 31, 29, 32, 31, 33, 
	31, 29, 29, 30, 29, 34, 29, 29, 
	35, 29, 29, 29, 29, 29, 29, 0, 
	36, 37, 0, 38, 37, 39, 37, 0, 
	0, 36, 0, 40, 0, 0, 0, 0, 
	0, 0, 0, 0, 27, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 41, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 42, 43, 44, 45, 0, 
	0, 0, 45, 28, 46, 29, 29, 29, 
	46, 47, 0, 48, 0, 28, 29, 49, 
	29, 50, 51, 52, 0, 0, 0, 0, 
	0, 53, 54, 0, 55, 0, 28, 0, 
	56, 0, 29, 57, 29, 58, 29, 59, 
	60, 61, 60, 62, 60, 0, 63, 64, 
	63, 65, 63, 66, 67, 0, 68, 0, 
	0, 0, 0, 69, 69, 0, 0, 70, 
	70, 71, 0, 28, 72, 0, 0, 0, 
	69, 0, 73, 0, 7, 0, 8, 0, 
	7, 0, 0, 0, 0, 8, 7, 0, 
	8, 0, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 0, 74, 0, 0, 0, 
	0, 74, 75, 0, 0, 0, 76, 77, 
	78, 79, 0, 7, 7, 80, 81, 82, 
	82, 83, 0, 0, 0, 0, 84, 0, 
	0, 0, 0, 0, 0, 28, 0, 0, 
	0, 29, 57, 29, 29, 29, 59, 60, 
	61, 60, 60, 60, 0, 63, 64, 63, 
	63, 63, 85, 66, 86, 87, 0, 88, 
	89, 90, 91, 0, 59, 92, 93, 0, 
	94, 28, 95, 96, 99, 100, 0, 28, 
	0, 7, 0, 7, 101, 102, 103, 59, 
	104, 0, 105, 0, 106, 107, 108, 0, 
	109, 110, 0, 111, 7, 7, 112, 113, 
	0, 0, 114, 115, 116, 117, 117, 117, 
	117, 117, 117, 117, 117, 118, 119, 120, 
	0, 0, 121, 0, 122, 123, 124, 0, 
	125, 126, 127, 0, 7, 0, 0, 128, 
	129, 0, 28, 130, 0, 0, 0, 0, 
	0, 131, 132, 0, 0, 0, 0, 0, 
	0, 0, 133, 0, 0, 0, 0, 134, 
	0, 0, 0, 0, 0, 135, 136, 137, 
	0, 138, 139, 140, 7, 7, 141, 0, 
	0, 142, 143, 144, 117, 117, 117, 117, 
	117, 117, 117, 117, 145, 146, 147, 0, 
	0, 148, 0, 149, 150, 151, 0, 152, 
	153, 154, 0, 7, 0, 0, 155, 156, 
	0, 28, 157, 0, 0, 0, 0, 0, 
	158, 159, 0, 0, 0, 0, 0, 0, 
	0, 160, 0, 0, 0, 0, 161, 0, 
	0, 0, 0, 0, 162, 163, 164, 0, 
	165, 166, 0, 167, 0, 168, 169, 170, 
	171, 172, 173, 0, 174, 175, 176, 177, 
	178, 179, 7, 180, 0, 0, 181, 182, 
	183, 184, 185, 186, 187, 0, 188, 7, 
	189, 190, 0, 0, 191, 192, 193, 194, 
	0, 195, 196, 197, 0, 198, 0, 0, 
	199, 200, 201, 202, 203, 204, 205, 0, 
	28, 0, 0, 7, 7, 0, 0, 0, 
	206, 0, 0, 0, 0, 207, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 208, 209, 210, 211, 
	212, 213, 59, 214, 0, 215, 0, 0, 
	0, 216, 0, 217, 218, 0, 0, 219, 
	0, 0, 0, 220, 0, 221, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 220, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 222, 0, 
	0, 0, 0, 223, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 224, 225, 0, 0, 
	0, 226, 227, 228, 59, 229, 0, 28, 
	230, 0, 231, 232, 0, 28, 0, 0, 
	233, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 234, 0, 235, 0, 236, 
	237, 238, 239, 240, 59, 241, 0, 0, 
	242, 0, 243, 244, 245, 246, 28, 0, 
	27, 0, 0, 27, 0, 0, 0, 0, 
	0, 0, 7, 7, 7, 247, 248, 249, 
	250, 251, 252, 253, 0, 254, 255, 256, 
	257, 258, 259, 260, 261, 262, 59, 263, 
	0, 264, 265, 266, 267, 268, 269, 0, 
	0, 0, 270, 7, 7, 0, 271, 272, 
	273, 274, 275, 0, 0, 0, 0, 0, 
	276, 277, 59, 278, 0, 279, 28, 280, 
	281, 282, 283, 284, 285, 0, 28, 0, 
	0, 0, 0, 0, 0, 286, 287, 288, 
	289, 59, 290, 0, 291, 28, 292, 293, 
	294, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 295, 296, 0, 
	8, 0, 0, 7, 297, 0, 0, 297, 
	297, 0, 0, 7, 298, 0, 298, 0, 
	298, 298, 298, 0, 0, 298, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 0, 
	298, 299, 300, 300, 301, 302, 0, 303, 
	304, 0, 74, 0, 305, 0, 306, 307, 
	308, 309, 310, 29, 311, 312, 313, 314, 
	315, 59, 316, 0, 317, 318, 0, 319, 
	320, 0, 321, 322, 297, 323, 0, 324, 
	325, 326, 0, 0, 327, 0, 0, 0, 
	0, 328, 0, 0, 0, 0, 0, 0, 
	0, 329, 0, 0, 330, 0, 331, 332, 
	0, 0, 0, 333, 0, 0, 334, 335, 
	336, 337, 338, 339, 0, 340, 341, 341, 
	0, 342, 0, 343, 344, 344, 0, 0, 
	345, 346, 347, 0, 348, 349, 350, 0, 
	7, 351, 352, 353, 0, 354, 117, 117, 
	117, 117, 117, 117, 117, 117, 355, 356, 
	357, 0, 0, 358, 0, 359, 360, 361, 
	0, 362, 363, 364, 0, 7, 0, 0, 
	365, 366, 0, 28, 367, 0, 0, 0, 
	0, 0, 368, 369, 0, 0, 0, 0, 
	0, 0, 0, 370, 0, 0, 0, 0, 
	0, 371, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 372, 373, 374, 0, 0, 
	0, 375, 28, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 74, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	376, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 377, 378, 379, 
	380, 381, 381, 377, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 295, 
	295, 295, 295, 295, 295, 295, 295, 382, 
	383, 384, 0, 28, 0, 0, 385, 386, 
	387, 59, 388, 0, 389, 28, 390, 7, 
	391, 392, 0, 28, 393, 0, 0, 394, 
	395, 396, 397, 59, 398, 0, 28, 399, 
	400, 401, 402, 0, 28, 0, 403, 0, 
	7, 404, 0, 0, 0, 0, 405, 0, 
	0, 406, 406, 0, 407, 0, 0, 0, 
	408, 7, 409, 409, 409, 0, 0, 410, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 411, 412, 413, 0, 
	414, 415, 416, 417, 418, 419, 59, 420, 
	0, 421, 0, 0, 422, 423, 424, 425, 
	426, 427, 428, 429, 430, 0, 431, 432, 
	433, 0, 0, 434, 0, 435, 436, 29, 
	437, 438, 439, 0, 0, 440, 0, 0, 
	439, 441, 441, 442, 443, 0, 444, 445, 
	0, 446, 447, 448, 0, 449, 450, 0, 
	0, 451, 452, 439, 439, 453, 0, 0, 
	454, 454, 0, 455, 0, 456, 457, 7, 
	0, 458, 0, 459, 460, 461, 462, 462, 
	463, 463, 0, 0, 464, 465, 465, 466, 
	466, 467, 468, 468, 469, 469, 470, 471, 
	471, 472, 472, 0, 0, 473, 474, 475, 
	476, 477, 478, 478, 475, 477, 479, 406, 
	480, 0, 0, 0, 481, 0, 0, 482, 
	483, 409, 409, 409, 484, 409, 485, 486, 
	28, 487, 488, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 489, 
	0, 0, 0, 0, 484, 0, 0, 0, 
	0, 0, 490, 491, 0, 0, 0, 0, 
	0, 0, 492, 0, 0, 0, 0, 0, 
	491, 493, 494, 0, 495, 0, 496, 0, 
	0, 0, 0, 497, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 498, 0, 0, 
	0, 0, 0, 0, 0, 497, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 499, 500, 501, 7, 
	502, 89, 502, 503, 504, 0, 0, 0, 
	505, 0, 506, 0, 0, 0, 507, 508
]

class << self
	attr_accessor :_lex_to_state_actions
	private :_lex_to_state_actions, :_lex_to_state_actions=
end
self._lex_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 97, 0, 0, 0, 0, 0, 
	0, 0, 0, 97, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 97, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 97, 0, 0, 97, 0, 97, 
	0, 0, 0, 97, 97, 0, 0, 0, 
	0, 97, 0, 97, 0, 97, 0, 0, 
	0, 0, 0, 97, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 97, 0, 0, 0, 
	0, 0, 0, 97, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	97, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 97, 
	0, 0, 0, 0, 0, 97, 0, 0, 
	0, 0, 0, 0, 0, 97, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 97, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 97, 0, 0, 0, 
	0, 0, 0, 97, 0, 0, 0, 0, 
	0, 0, 0, 97, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 97, 
	0, 0, 0, 0, 0, 97, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_lex_from_state_actions
	private :_lex_from_state_actions, :_lex_from_state_actions=
end
self._lex_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 98, 0, 0, 0, 0, 0, 
	0, 0, 0, 98, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 98, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 98, 0, 0, 98, 0, 98, 
	0, 0, 0, 98, 98, 0, 0, 0, 
	0, 98, 0, 98, 0, 98, 0, 0, 
	0, 0, 0, 98, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 98, 0, 0, 0, 
	0, 0, 0, 98, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	98, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 98, 
	0, 0, 0, 0, 0, 98, 0, 0, 
	0, 0, 0, 0, 0, 98, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 98, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 98, 0, 0, 0, 
	0, 0, 0, 98, 0, 0, 0, 0, 
	0, 0, 0, 98, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 98, 
	0, 0, 0, 0, 0, 98, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_lex_eof_trans
	private :_lex_eof_trans, :_lex_eof_trans=
end
self._lex_eof_trans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 44, 44, 44, 
	44, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 75, 
	75, 75, 75, 81, 81, 81, 81, 0, 
	0, 0, 0, 96, 98, 100, 100, 100, 
	105, 105, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 109, 
	109, 109, 109, 109, 109, 109, 109, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 180, 182, 182, 182, 194, 
	194, 194, 202, 204, 204, 204, 204, 204, 
	210, 202, 202, 202, 202, 202, 202, 202, 
	237, 237, 237, 237, 237, 237, 202, 253, 
	202, 253, 237, 237, 202, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 202, 237, 237, 237, 237, 
	291, 291, 291, 296, 298, 298, 298, 302, 
	302, 302, 306, 306, 306, 306, 311, 311, 
	311, 296, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 342, 347, 347, 351, 347, 
	351, 342, 0, 365, 366, 367, 369, 371, 
	373, 371, 371, 0, 383, 384, 388, 388, 
	389, 398, 399, 400, 400, 400, 403, 403, 
	405, 406, 407, 407, 407, 409, 410, 411, 
	411, 407, 403, 403, 416, 417, 417, 417, 
	417, 417, 420, 420, 420, 420, 426, 427, 
	427, 427, 427, 435, 427, 427, 427, 427, 
	440, 427, 427, 427, 427, 427, 427, 446, 
	447, 448, 448, 0, 455, 459, 459, 460, 
	469, 470, 471, 471, 471, 474, 474, 476, 
	477, 478, 478, 478, 480, 481, 482, 482, 
	478, 474, 474, 487, 488, 488, 488, 488, 
	488, 491, 491, 491, 491, 497, 498, 498, 
	498, 498, 506, 498, 498, 498, 498, 511, 
	498, 498, 498, 498, 498, 498, 517, 518, 
	519, 519, 0, 526, 527, 0, 533, 0, 
	540, 544, 544, 0, 0, 553, 554, 558, 
	558, 0, 563, 0, 566, 0, 569, 569, 
	570, 571, 572, 0, 613, 615, 616, 617, 
	618, 620, 622, 626, 626, 617, 617, 617, 
	617, 628, 617, 617, 622, 617, 617, 613, 
	632, 632, 632, 632, 632, 632, 622, 622, 
	638, 638, 638, 638, 638, 638, 638, 638, 
	638, 638, 638, 638, 638, 638, 638, 638, 
	638, 638, 638, 638, 638, 638, 638, 638, 
	638, 638, 638, 638, 638, 638, 638, 638, 
	638, 638, 638, 671, 638, 638, 638, 638, 
	638, 638, 638, 638, 638, 638, 638, 638, 
	638, 638, 638, 638, 638, 638, 638, 638, 
	638, 638, 638, 638, 638, 638, 638, 638, 
	638, 638, 638, 638, 638, 638, 638, 638, 
	638, 638, 638, 638, 638, 638, 638, 638, 
	638, 638, 638, 617, 0, 714, 715, 716, 
	718, 714, 721, 0, 740, 742, 744, 745, 
	746, 747, 748, 750, 747, 747, 747, 747, 
	747, 753, 747, 747, 755, 753, 753, 747, 
	0, 774, 775, 105, 105, 778, 779, 105, 
	775, 775, 782, 784, 787, 775, 788, 775, 
	789, 790, 792, 794, 775, 782, 795, 795, 
	784, 795, 799, 795, 795, 795, 795, 0, 
	180, 807, 808, 807, 807, 0, 817, 818, 
	820, 822, 824, 822, 826, 0, 838, 839, 
	840, 841, 843, 845, 847, 848, 848, 848, 
	848, 848, 848, 848, 848, 848, 848, 848, 
	848, 848, 848, 848, 848, 0, 906, 909, 
	912, 913, 917, 919, 920, 921, 922, 923, 
	925, 928, 929, 931, 933, 936, 937, 939, 
	940, 202, 937, 942, 937, 928, 944, 928, 
	928, 962, 965, 967, 968, 972, 975, 976, 
	977, 978, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 982, 986, 988, 962, 
	962, 928, 993, 994, 994, 994, 928, 928, 
	928, 995, 1002, 1002, 1004, 1006, 1015, 1016, 
	1017, 1017, 1017, 1020, 1020, 1022, 1023, 1024, 
	1024, 1024, 1026, 1027, 1028, 1028, 1024, 1020, 
	1020, 1033, 1034, 1034, 1034, 1034, 1034, 1037, 
	1037, 1037, 1037, 1043, 1044, 1044, 1044, 1044, 
	1052, 1044, 1044, 1044, 1044, 1058, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 
	1044, 1076, 1077, 1078, 1078, 202, 928, 928, 
	1082, 928, 923, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 202, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 1135, 
	913, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 1160, 928, 0, 1167, 1168, 1169, 
	1171, 1173, 1175, 0, 1184, 1185, 1186, 1187, 
	1189, 1184, 1192, 0, 302, 1247, 1249, 1250, 
	1251, 1252, 1254, 1256, 1258, 1261, 1261, 302, 
	1263, 1265, 1266, 1267, 1263, 1269, 1272, 1273, 
	1273, 302, 1278, 1281, 1292, 302, 1298, 1300, 
	1302, 1303, 1306, 1307, 1281, 1281, 1310, 1310, 
	1310, 1316, 1318, 1319, 1322, 1324, 1325, 1326, 
	1310, 1310, 1333, 1338, 1343, 1310, 1310, 1350, 
	1350, 1310, 1310, 1272, 1263, 1263, 1272, 1263, 
	1263, 1258, 302, 1368, 1369, 1369, 1369, 1369, 
	1369, 1369, 1375, 1258, 1378, 1379, 1379, 1379, 
	1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 
	1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 
	1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 
	1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 
	1379, 1418, 1419, 1379, 1379, 1423, 1379, 1379, 
	1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 
	1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 
	1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 
	1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 
	1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 
	1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 
	1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 
	1379, 1379, 1379, 1379, 1477, 1252, 1478, 0, 
	1484, 1485, 1484, 1484, 1484, 0, 1491, 1491, 
	1491, 1491, 1495
]

class << self
	attr_accessor :lex_start
end
self.lex_start = 186;
class << self
	attr_accessor :lex_error
end
self.lex_error = 0;

class << self
	attr_accessor :lex_en_interp_words
end
self.lex_en_interp_words = 195;
class << self
	attr_accessor :lex_en_interp_string
end
self.lex_en_interp_string = 251;
class << self
	attr_accessor :lex_en_plain_words
end
self.lex_en_plain_words = 306;
class << self
	attr_accessor :lex_en_plain_string
end
self.lex_en_plain_string = 309;
class << self
	attr_accessor :lex_en_interp_backslash_delimited
end
self.lex_en_interp_backslash_delimited = 311;
class << self
	attr_accessor :lex_en_plain_backslash_delimited
end
self.lex_en_plain_backslash_delimited = 315;
class << self
	attr_accessor :lex_en_interp_backslash_delimited_words
end
self.lex_en_interp_backslash_delimited_words = 316;
class << self
	attr_accessor :lex_en_plain_backslash_delimited_words
end
self.lex_en_plain_backslash_delimited_words = 321;
class << self
	attr_accessor :lex_en_regexp_modifiers
end
self.lex_en_regexp_modifiers = 323;
class << self
	attr_accessor :lex_en_expr_variable
end
self.lex_en_expr_variable = 325;
class << self
	attr_accessor :lex_en_expr_fname
end
self.lex_en_expr_fname = 331;
class << self
	attr_accessor :lex_en_expr_endfn
end
self.lex_en_expr_endfn = 444;
class << self
	attr_accessor :lex_en_expr_dot
end
self.lex_en_expr_dot = 451;
class << self
	attr_accessor :lex_en_expr_arg
end
self.lex_en_expr_arg = 472;
class << self
	attr_accessor :lex_en_expr_cmdarg
end
self.lex_en_expr_cmdarg = 503;
class << self
	attr_accessor :lex_en_expr_endarg
end
self.lex_en_expr_endarg = 509;
class << self
	attr_accessor :lex_en_expr_mid
end
self.lex_en_expr_mid = 517;
class << self
	attr_accessor :lex_en_expr_beg
end
self.lex_en_expr_beg = 541;
class << self
	attr_accessor :lex_en_expr_labelarg
end
self.lex_en_expr_labelarg = 764;
class << self
	attr_accessor :lex_en_expr_value
end
self.lex_en_expr_value = 771;
class << self
	attr_accessor :lex_en_expr_end
end
self.lex_en_expr_end = 779;
class << self
	attr_accessor :lex_en_leading_dot
end
self.lex_en_leading_dot = 959;
class << self
	attr_accessor :lex_en_line_comment
end
self.lex_en_line_comment = 965;
class << self
	attr_accessor :lex_en_line_begin
end
self.lex_en_line_begin = 186;


# line 82 "lib/parser/lexer.rl"
  # %

  ESCAPES = {
    ?a.ord => "\a", ?b.ord  => "\b", ?e.ord => "\e", ?f.ord => "\f",
    ?n.ord => "\n", ?r.ord  => "\r", ?s.ord => "\s", ?t.ord => "\t",
    ?v.ord => "\v", ?\\.ord => "\\"
  }.freeze

  REGEXP_META_CHARACTERS = Regexp.union(*"\\$()*+.<>?[]^{|}".chars).freeze

  NUMPARAM_MAX = 9

  attr_reader   :source_buffer
  attr_reader   :max_numparam_stack

  attr_accessor :diagnostics
  attr_accessor :static_env
  attr_accessor :force_utf32

  attr_accessor :cond, :cmdarg, :in_kwarg, :context

  attr_accessor :tokens, :comments

  def initialize(version)
    @version    = version
    @static_env = nil
    @context    = nil

    @tokens     = nil
    @comments   = nil

    reset
  end

  def reset(reset_state=true)
    # Ragel state:
    if reset_state
      # Unit tests set state prior to resetting lexer.
      @cs     = self.class.lex_en_line_begin

      @cond   = StackState.new('cond')
      @cmdarg = StackState.new('cmdarg')
      @cond_stack   = []
      @cmdarg_stack = []
    end

    @force_utf32   = false # Set to true by some tests

    @source_pts    = nil # @source as a codepoint array

    @p             = 0   # stream position (saved manually in #advance)
    @ts            = nil # token start
    @te            = nil # token end
    @act           = 0   # next action

    @stack         = []  # state stack
    @top           = 0   # state stack top pointer

    # Lexer state:
    @token_queue   = []
    @literal_stack = []

    @eq_begin_s    = nil # location of last encountered =begin
    @sharp_s       = nil # location of last encountered #

    @newline_s     = nil # location of last encountered newline

    @num_base      = nil # last numeric base
    @num_digits_s  = nil # starting position of numeric digits
    @num_suffix_s  = nil # starting position of numeric suffix
    @num_xfrm      = nil # numeric suffix-induced transformation

    @escape_s      = nil # starting position of current sequence
    @escape        = nil # last escaped sequence, as string

    @herebody_s    = nil # starting position of current heredoc line

    # Ruby 1.9 ->() lambdas emit a distinct token if do/{ is
    # encountered after a matching closing parenthesis.
    @paren_nest    = 0
    @lambda_stack  = []

    # After encountering the closing line of <<~SQUIGGLY_HEREDOC,
    # we store the indentation level and give it out to the parser
    # on request. It is not possible to infer indentation level just
    # from the AST because escape sequences such as `\ ` or `\t` are
    # expanded inside the lexer, but count as non-whitespace for
    # indentation purposes.
    @dedent_level  = nil

    # If the lexer is in `command state' (aka expr_value)
    # at the entry to #advance, it will transition to expr_cmdarg
    # instead of expr_arg at certain points.
    @command_start = true

    # True at the end of "def foo a:"
    @in_kwarg      = false

    # State before =begin / =end block comment
    @cs_before_block_comment = self.class.lex_en_line_begin

    # Maximum numbered parameters stack
    @max_numparam_stack = MaxNumparamStack.new
  end

  def source_buffer=(source_buffer)
    @source_buffer = source_buffer

    if @source_buffer
      source = @source_buffer.source

      if source.encoding == Encoding::UTF_8
        @source_pts = source.unpack('U*')
      else
        @source_pts = source.unpack('C*')
      end

      if @source_pts[0] == 0xfeff
        # Skip byte order mark.
        @p = 1
      end
    else
      @source_pts = nil
    end
  end

  def encoding
    @source_buffer.source.encoding
  end

  LEX_STATES = {
    :line_begin    => lex_en_line_begin,
    :expr_dot      => lex_en_expr_dot,
    :expr_fname    => lex_en_expr_fname,
    :expr_value    => lex_en_expr_value,
    :expr_beg      => lex_en_expr_beg,
    :expr_mid      => lex_en_expr_mid,
    :expr_arg      => lex_en_expr_arg,
    :expr_cmdarg   => lex_en_expr_cmdarg,
    :expr_end      => lex_en_expr_end,
    :expr_endarg   => lex_en_expr_endarg,
    :expr_endfn    => lex_en_expr_endfn,
    :expr_labelarg => lex_en_expr_labelarg,

    :interp_string => lex_en_interp_string,
    :interp_words  => lex_en_interp_words,
    :plain_string  => lex_en_plain_string,
    :plain_words   => lex_en_plain_string,
  }

  def state
    LEX_STATES.invert.fetch(@cs, @cs)
  end

  def state=(state)
    @cs = LEX_STATES.fetch(state)
  end

  def push_cmdarg
    @cmdarg_stack.push(@cmdarg)
    @cmdarg = StackState.new("cmdarg.#{@cmdarg_stack.count}")
  end

  def pop_cmdarg
    @cmdarg = @cmdarg_stack.pop
  end

  def push_cond
    @cond_stack.push(@cond)
    @cond = StackState.new("cond.#{@cond_stack.count}")
  end

  def pop_cond
    @cond = @cond_stack.pop
  end

  def max_numparam
    @max_numparam_stack.top
  end

  def dedent_level
    # We erase @dedent_level as a precaution to avoid accidentally
    # using a stale value.
    dedent_level, @dedent_level = @dedent_level, nil
    dedent_level
  end

  # Return next token: [type, value].
  def advance
    if @token_queue.any?
      return @token_queue.shift
    end

    # Ugly, but dependent on Ragel output. Consider refactoring it somehow.
    klass = self.class
    _lex_trans_keys         = klass.send :_lex_trans_keys
    _lex_key_spans          = klass.send :_lex_key_spans
    _lex_index_offsets      = klass.send :_lex_index_offsets
    _lex_indicies           = klass.send :_lex_indicies
    _lex_trans_targs        = klass.send :_lex_trans_targs
    _lex_trans_actions      = klass.send :_lex_trans_actions
    _lex_to_state_actions   = klass.send :_lex_to_state_actions
    _lex_from_state_actions = klass.send :_lex_from_state_actions
    _lex_eof_trans          = klass.send :_lex_eof_trans

    pe = @source_pts.size + 2
    p, eof = @p, pe

    cmd_state = @command_start
    @command_start = false

    
# line 10951 "lib/parser/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if  @cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	case _lex_from_state_actions[ @cs] 
	when 98 then
# line 1 "NONE"
		begin
 @ts = p
		end
# line 10979 "lib/parser/lexer.rb"
	end
	_keys =  @cs << 1
	_inds = _lex_index_offsets[ @cs]
	_slen = _lex_key_spans[ @cs]
	_wide = ( (@source_pts[p] || 0))
	_trans = if (   _slen > 0 && 
			_lex_trans_keys[_keys] <= _wide && 
			_wide <= _lex_trans_keys[_keys + 1] 
		    ) then
			_lex_indicies[ _inds + _wide - _lex_trans_keys[_keys] ] 
		 else 
			_lex_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	 @cs = _lex_trans_targs[_trans]
	if _lex_trans_actions[_trans] != 0
	case _lex_trans_actions[_trans]
	when 28 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 117 then
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 29 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
	when 59 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
	when 63 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 302 then
# line 1242 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 36 then
# line 1546 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 38 then
# line 1562 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 40 then
# line 1590 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 70 then
# line 1781 "lib/parser/lexer.rl"
		begin
 heredoc_e      = p 		end
	when 341 then
# line 1873 "lib/parser/lexer.rl"
		begin
 tm = p - 1; diag_msg = :ivar_name 		end
	when 344 then
# line 1874 "lib/parser/lexer.rl"
		begin
 tm = p - 2; diag_msg = :cvar_name 		end
	when 352 then
# line 1894 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
	when 381 then
# line 1964 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 300 then
# line 2045 "lib/parser/lexer.rl"
		begin
 ident_tok = tok; ident_ts = @ts; ident_te = @te; 		end
	when 471 then
# line 2228 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
	when 465 then
# line 2229 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
	when 468 then
# line 2230 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
	when 462 then
# line 2231 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
	when 477 then
# line 2232 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
	when 439 then
# line 2233 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
	when 454 then
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 447 then
# line 2291 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 444 then
# line 2292 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 89 then
# line 2487 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 7 then
# line 1 "NONE"
		begin
 @te = p+1
		end
	when 114 then
# line 1079 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    @command_start = true
     @cs = 771;
    	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 5 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 325
		_goto_level = _again
		next
	end

   end
		end
	when 110 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 109 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 115 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 325
		_goto_level = _again
		next
	end

   end
		end
	when 112 then
# line 1008 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 113 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 6 then
# line 891 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 4 then
# line 867 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 142 then
# line 1079 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    @command_start = true
     @cs = 771;
    	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 10 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 325
		_goto_level = _again
		next
	end

   end
		end
	when 139 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 138 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 143 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 325
		_goto_level = _again
		next
	end

   end
		end
	when 141 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 11 then
# line 891 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 9 then
# line 867 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 166 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 165 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 168 then
# line 1008 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 169 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 172 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 171 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 174 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 181 then
# line 1079 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    @command_start = true
     @cs = 771;
    	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 13 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 325
		_goto_level = _again
		next
	end

   end
		end
	when 178 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 177 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 182 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 325
		_goto_level = _again
		next
	end

   end
		end
	when 180 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 12 then
# line 867 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 184 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 183 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 191 then
# line 1079 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    @command_start = true
     @cs = 771;
    	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 15 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 325
		_goto_level = _again
		next
	end

   end
		end
	when 187 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 186 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 192 then
# line 1021 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 325
		_goto_level = _again
		next
	end

   end
		end
	when 189 then
# line 1008 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 190 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 14 then
# line 867 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 194 then
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 193 then
# line 867 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 764;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 196 then
# line 1008 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 197 then
# line 1172 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tREGEXP_OPT, tok(@ts, @te - 1), @ts, @te - 1)
        p = p - 1;
        	begin
		 @cs = 779
		_goto_level = _again
		next
	end

       end
		end
	when 198 then
# line 1159 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        unknown_options = tok.scan(/[^imxouesn]/)
        if unknown_options.any?
          diagnostic :error, :regexp_options,
                     { :options => unknown_options.join }
        end

        emit(:tREGEXP_OPT)
         @cs = 779;
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 16 then
# line 1305 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 199 then
# line 1305 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 202 then
# line 1318 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@@[0-9]/
          diagnostic :error, :cvar_name, { :name => tok }
        end

        emit(:tCVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 201 then
# line 1328 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version < 27
          diagnostic :error, :ivar_name, { :name => tok }
        end

        value = tok[1..-1]

        if value[0] == '0'
          diagnostic :error, :leading_zero_in_numparam, nil, range(@ts, @te)
        end

        if value.to_i > NUMPARAM_MAX
          diagnostic :error, :too_large_numparam, nil, range(@ts, @te)
        end

        if !@context.in_block? && !@context.in_lambda?
          diagnostic :error, :numparam_outside_block, nil, range(@ts, @te)
        end

        if !@max_numparam_stack.can_have_numparams?
          diagnostic :error, :ordinary_param_defined, nil, range(@ts, @te)
        end

        @max_numparam_stack.register(value.to_i)

        emit(:tNUMPARAM, tok[1..-1])
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 200 then
# line 1358 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@[0-9]/
          diagnostic :error, :ivar_name, { :name => tok }
        end

        emit(:tIVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 223 then
# line 1379 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(KEYWORDS_BEGIN);
            @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 209 then
# line 1387 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tIDENTIFIER)
            @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 18 then
# line 1391 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
            @cs = 779; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 325
		_goto_level = _again
		next
	end
  end
		end
	when 206 then
# line 1400 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 218 then
# line 1404 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 20 then
# line 1410 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if version?(23)
          type, delimiter = tok[0..-2], tok[-1].chr
          	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

        else
          p = @ts - 1
          	begin
		 @cs = 779
		_goto_level = _again
		next
	end

        end
       end
		end
	when 205 then
# line 1423 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 204 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 222 then
# line 1379 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS_BEGIN);
            @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 219 then
# line 1383 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 221 then
# line 1387 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 216 then
# line 1391 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
            @cs = 779; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 325
		_goto_level = _again
		next
	end
  end
		end
	when 212 then
# line 1400 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 217 then
# line 1407 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 210 then
# line 1420 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 215 then
# line 1423 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 19 then
# line 1400 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit_table(PUNCTUATION)
            @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 17 then
# line 1423 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 208 then
# line 1 "NONE"
		begin
	case  @act
	when 40 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN);
            @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 41 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 42 then
	begin begin p = (( @te))-1; end
 emit(:tIDENTIFIER)
            @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 22 then
# line 1435 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
           p = p - 1;  @cs = 764; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 225 then
# line 1441 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 224 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 227 then
# line 1438 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 226 then
# line 1441 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 21 then
# line 1441 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 233 then
# line 1467 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 472; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 232 then
# line 1473 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 231 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 243 then
# line 1452 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 234 then
# line 1456 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 239 then
# line 1467 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 472; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 237 then
# line 1470 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 242 then
# line 1473 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 266 then
# line 1532 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 779
		_goto_level = _again
		next
	end

       end
		end
	when 249 then
# line 1550 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if tok(tm, tm + 1) == '/'.freeze
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 541
		_goto_level = _again
		next
	end

       end
		end
	when 255 then
# line 1574 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 24 then
# line 1582 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 257 then
# line 1591 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 39 then
# line 1602 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 779
		_goto_level = _again
		next
	end

       end
		end
	when 244 then
# line 1616 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 245 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 256 then
# line 1541 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 252 then
# line 1563 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 541
		_goto_level = _again
		next
	end

       end
		end
	when 254 then
# line 1579 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 248 then
# line 1602 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 779
		_goto_level = _again
		next
	end

       end
		end
	when 247 then
# line 1607 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 265 then
# line 1616 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 25 then
# line 1607 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 41 then
# line 1616 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 23 then
# line 1 "NONE"
		begin
	case  @act
	when 68 then
	begin begin p = (( @te))-1; end

        if tok(tm, tm + 1) == '/'.freeze
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 541
		_goto_level = _again
		next
	end

      end
	when 69 then
	begin begin p = (( @te))-1; end

        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 541
		_goto_level = _again
		next
	end

      end
	when 74 then
	begin begin p = (( @te))-1; end

        p = @ts - 1
        	begin
		 @cs = 779
		_goto_level = _again
		next
	end

      end
	else
	begin begin p = (( @te))-1; end
end
end 
			end
	when 43 then
# line 1652 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 472
		_goto_level = _again
		next
	end
  end
		end
	when 270 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 271 then
# line 1652 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 472
		_goto_level = _again
		next
	end
  end
		end
	when 44 then
# line 1652 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1
           	begin
		 @cs = 472
		_goto_level = _again
		next
	end
  end
		end
	when 42 then
# line 1 "NONE"
		begin
	case  @act
	when 81 then
	begin begin p = (( @te))-1; end

        if @cond.active?
          emit(:kDO_COND, 'do'.freeze, @te - 2, @te)
        else
          emit(:kDO, 'do'.freeze, @te - 2, @te)
        end
         @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 82 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 472
		_goto_level = _again
		next
	end
 end
end 
			end
	when 281 then
# line 1687 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_do(true)
            @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 274 then
# line 1693 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 275 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 276 then
# line 1690 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 279 then
# line 1693 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 285 then
# line 1717 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 284 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 293 then
# line 1709 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 287 then
# line 1711 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 291 then
# line 1717 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 286 then
# line 1 "NONE"
		begin
	case  @act
	when 89 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 90 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
 end
end 
			end
	when 56 then
# line 1732 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 326 then
# line 1749 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type = delimiter = tok[0].chr
        p = p - 1; 	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 318 then
# line 1756 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = @source_buffer.slice(@ts).chr, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 54 then
# line 1763 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 339 then
# line 1838 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1; p = p - 1;
        emit(:tSYMBEG, tok(@ts, @ts + 1), @ts, @ts + 1)
        	begin
		 @cs = 331
		_goto_level = _again
		next
	end

       end
		end
	when 327 then
# line 1846 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 338 then
# line 1854 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tSYMBOL, tok(@ts + 1, @ts + 2))
         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 68 then
# line 1868 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 349 then
# line 1909 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source_buffer.slice(@ts + 1)]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 779
		_goto_level = _again
		next
	end

       end
		end
	when 348 then
# line 1919 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 328 then
# line 1959 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 51 then
# line 1980 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;

        if version?(18)
          ident = tok(@ts, @te - 2)

          emit((@source_buffer.slice(@ts) =~ /[A-Z]/) ? :tCONSTANT : :tIDENTIFIER,
               ident, @ts, @te - 2)
          p = p - 1; # continue as a symbol

          if !@static_env.nil? && @static_env.declared?(ident)
             @cs = 779;
          else
             @cs = (arg_or_cmdarg(cmd_state));
          end
        else
          emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
           @cs = 764;
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 325 then
# line 2018 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if @version >= 27
          emit(:tBDOT3)
        else
          emit(:tDOT3)
        end

         @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 48 then
# line 2047 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tIDENTIFIER, ident_tok, ident_ts, ident_te)
        p = ident_te - 1

        if !@static_env.nil? && @static_env.declared?(ident_tok) && @version < 25
           @cs = 444;
        else
           @cs = 503;
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 312 then
# line 2066 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        @cs_before_block_comment = @cs
        	begin
		 @cs = 186
		_goto_level = _again
		next
	end

       end
		end
	when 55 then
# line 2082 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 296 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 323 then
# line 1732 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 322 then
# line 1739 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tSTAR, '*'.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 319 then
# line 1763 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 317 then
# line 1769 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 346 then
# line 1829 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
       end
		end
	when 329 then
# line 1868 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 342 then
# line 1876 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version >= 27
          diagnostic :error, diag_msg, { name: tok(tm, @te) }, range(tm, @te)
        else
          emit(:tCOLON, tok(@ts, @ts + 1), @ts, @ts + 1)
          p = @ts
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 347 then
# line 1919 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 353 then
# line 1925 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 779
		_goto_level = _again
		next
	end

       end
		end
	when 320 then
# line 1959 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 324 then
# line 2007 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version >= 27
          emit(:tBDOT2)
        else
          emit(:tDOT2)
        end

         @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 299 then
# line 1290 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 309 then
# line 2063 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 311 then
# line 2066 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        @cs_before_block_comment = @cs
        	begin
		 @cs = 186
		_goto_level = _again
		next
	end

       end
		end
	when 314 then
# line 2082 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 53 then
# line 1769 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 72 then
# line 1829 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
       end
		end
	when 73 then
# line 1896 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 47 then
# line 1290 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 52 then
# line 2063 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 67 then
# line 2082 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 50 then
# line 1 "NONE"
		begin
	case  @act
	when 95 then
	begin begin p = (( @te))-1; end

        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 102 then
	begin begin p = (( @te))-1; end

        diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
      end
	when 116 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 117 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 517; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 118 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
           @command_start = true
            @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 122 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 779
		_goto_level = _again
		next
	end
 end
	when 123 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 127 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
 end
end 
			end
	when 383 then
# line 2102 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 384 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 385 then
# line 2090 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 389 then
# line 2102 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 76 then
# line 2112 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 393 then
# line 2117 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        	begin
		 @cs = (push_literal(tok, tok, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 392 then
# line 2127 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 391 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 395 then
# line 2121 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 394 then
# line 2127 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 75 then
# line 2127 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 541
		_goto_level = _again
		next
	end
  end
		end
	when 429 then
# line 2138 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tLAMBDA, '->'.freeze, @ts, @ts + 2)

        @lambda_stack.push @paren_nest
         @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 86 then
# line 2176 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 403 then
# line 2312 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts, nil, false, false, true))
		_goto_level = _again
		next
	end

       end
		end
	when 78 then
# line 2330 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 325
		_goto_level = _again
		next
	end
  end
		end
	when 425 then
# line 2355 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 481 then
# line 2379 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION)
        	begin
		 @cs = 771
		_goto_level = _again
		next
	end

       end
		end
	when 418 then
# line 2388 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION);
         @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 410 then
# line 2398 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION)

        if @version < 24
          @cond.lexpop
          @cmdarg.lexpop
        else
          @cond.pop
          @cmdarg.pop
        end

        if tok == '}'.freeze || tok == ']'.freeze
          if @version >= 25
             @cs = 779;
          else
             @cs = 509;
          end
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 423 then
# line 2423 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tOP_ASGN, tok(@ts, @te - 1))
            @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 408 then
# line 2427 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tEH, '?'.freeze)
            @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 405 then
# line 2435 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 407 then
# line 2448 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tSEMI, ';'.freeze)
           @command_start = true
            @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 486 then
# line 2452 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :error, :bare_backslash, nil, range(@ts, @ts + 1)
        p = p - 1;
       end
		end
	when 402 then
# line 2458 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 401 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 496 then
# line 2172 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 331; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 494 then
# line 2176 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 493 then
# line 2187 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
           @command_start = true
            @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 433 then
# line 2262 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 483 then
# line 2322 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 422 then
# line 2330 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 325
		_goto_level = _again
		next
	end
  end
		end
	when 430 then
# line 2355 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 488 then
# line 1290 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 428 then
# line 2379 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        	begin
		 @cs = 771
		_goto_level = _again
		next
	end

       end
		end
	when 424 then
# line 2388 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION);
         @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 417 then
# line 2394 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 432 then
# line 2435 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 415 then
# line 2442 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 421 then
# line 2458 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 84 then
# line 2235 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 79 then
# line 2262 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 83 then
# line 2294 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 77 then
# line 2458 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 80 then
# line 1 "NONE"
		begin
	case  @act
	when 140 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end
        @command_start = true

         @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 141 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 331; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 142 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 143 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 144 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           @command_start = true
            @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 145 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 517; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 146 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'.freeze
           @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 472; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 147 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg(cmd_state));
          end
        else
          emit(:k__ENCODING__, '__ENCODING__'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 148 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 149 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 151 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 152 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 153 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 155 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 158 then
	begin begin p = (( @te))-1; end
 emit(:tDOT, '.', @ts, @ts + 1)
           emit(:tCOLON, ':', @ts + 1, @ts + 2)
           p = p - tok.length + 2
            @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 159 then
	begin begin p = (( @te))-1; end

        if @version >= 27
          emit_table(PUNCTUATION)
        else
          emit(:tDOT, tok(@ts, @ts + 1), @ts, @ts + 1)
          p = p - 1;
        end

         @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 161 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 162 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 472; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 164 then
	begin begin p = (( @te))-1; end

        emit_table(PUNCTUATION);
         @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 165 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION)
            @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 96 then
# line 2488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 501 then
# line 2491 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 186; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 504 then
# line 2474 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version < 27
          # Ruby before 2.7 doesn't support comments before leading dot.
          # If a line after "a" starts with a comment then "a" is a self-contained statement.
          # So in that case we emit a special tNL token and start reading the
          # next line as a separate statement.
          #
          # Note: block comments before leading dot are not supported on any version of Ruby.
          emit(:tNL, nil, @newline_s, @newline_s + 1)
          p = p - 1;  @cs = 186; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 503 then
# line 2491 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 186; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 91 then
# line 2474 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        if @version < 27
          # Ruby before 2.7 doesn't support comments before leading dot.
          # If a line after "a" starts with a comment then "a" is a self-contained statement.
          # So in that case we emit a special tNL token and start reading the
          # next line as a separate statement.
          #
          # Note: block comments before leading dot are not supported on any version of Ruby.
          emit(:tNL, nil, @newline_s, @newline_s + 1)
          p = p - 1;  @cs = 186; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 87 then
# line 2491 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 186; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 93 then
# line 1 "NONE"
		begin
	case  @act
	when 177 then
	begin begin p = (( @te))-1; end

        if @version < 27
          # Ruby before 2.7 doesn't support comments before leading dot.
          # If a line after "a" starts with a comment then "a" is a self-contained statement.
          # So in that case we emit a special tNL token and start reading the
          # next line as a separate statement.
          #
          # Note: block comments before leading dot are not supported on any version of Ruby.
          emit(:tNL, nil, @newline_s, @newline_s + 1)
          p = p - 1;  @cs = 186; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 179 then
	begin begin p = (( @te))-1; end
 emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 186; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 507 then
# line 2501 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = (@cs_before_block_comment)
		_goto_level = _again
		next
	end

       end
		end
	when 506 then
# line 2509 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :embedded_document, nil,
                   range(@eq_begin_s, @eq_begin_s + '=begin'.length)
       end
		end
	when 107 then
# line 2519 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 965
		_goto_level = _again
		next
	end
  end
		end
	when 2 then
# line 2523 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 99 then
# line 2526 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  cmd_state = true; p = p - 1; 	begin
		 @cs = 771
		_goto_level = _again
		next
	end
  end
		end
	when 100 then
# line 528 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 101 then
# line 2516 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 106 then
# line 2519 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  @eq_begin_s = @ts
           	begin
		 @cs = 965
		_goto_level = _again
		next
	end
  end
		end
	when 105 then
# line 2526 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  cmd_state = true; p = p - 1; 	begin
		 @cs = 771
		_goto_level = _again
		next
	end
  end
		end
	when 1 then
# line 2526 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  cmd_state = true; p = p - 1; 	begin
		 @cs = 771
		_goto_level = _again
		next
	end
  end
		end
	when 66 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 111 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 140 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 167 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 173 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 179 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 185 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 188 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 195 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 267 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1532 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 779
		_goto_level = _again
		next
	end

       end
		end
	when 258 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1591 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 250 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1602 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 779
		_goto_level = _again
		next
	end

       end
		end
	when 350 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1909 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source_buffer.slice(@ts + 1)]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 779
		_goto_level = _again
		next
	end

       end
		end
	when 313 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2066 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        @cs_before_block_comment = @cs
        	begin
		 @cs = 186
		_goto_level = _again
		next
	end

       end
		end
	when 508 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2501 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = (@cs_before_block_comment)
		_goto_level = _again
		next
	end

       end
		end
	when 505 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2506 "lib/parser/lexer.rl"
		begin
 @te = p+1
		end
	when 108 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2519 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 965
		_goto_level = _again
		next
	end
  end
		end
	when 3 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2523 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 457 then
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 455 then
# line 637 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, chars)) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 460 then
# line 638 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 458 then
# line 639 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars, @ts, @te - 2); p -= 2 } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 456 then
# line 640 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars, @ts, @te - 2); p -= 2 } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 459 then
# line 641 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars, @ts, @te - 6); p -= 6 } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 448 then
# line 645 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Float(chars))) } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 449 then
# line 646 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars), @ts, @te - 2); p -= 2 } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 450 then
# line 650 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 452 then
# line 651 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 451 then
# line 652 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars), @ts, @te - 6); p -= 6 } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 134 then
# line 667 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    if @version < 24
      if codepoints.start_with?(" ") || codepoints.start_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(@escape_s + 2, @escape_s + 3)
      end

      if spaces_p = codepoints.index(/[ \t]{2}/)
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(codepoint_s + spaces_p + 1, codepoint_s + spaces_p + 2)
      end

      if codepoints.end_with?(" ") || codepoints.end_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil, range(p - 1, p)
      end
    end

    codepoints.scan(/([0-9a-fA-F]+)|([ \t]+)/).each do |(codepoint_str, spaces)|
      if spaces
        codepoint_s += spaces.length
      else
        codepoint = codepoint_str.to_i(16)

        if codepoint >= 0x110000
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
          break
        end

        @escape     += codepoint.chr(Encoding::UTF_8)
        codepoint_s += codepoint_str.length
      end
    end
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 161 then
# line 667 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    if @version < 24
      if codepoints.start_with?(" ") || codepoints.start_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(@escape_s + 2, @escape_s + 3)
      end

      if spaces_p = codepoints.index(/[ \t]{2}/)
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(codepoint_s + spaces_p + 1, codepoint_s + spaces_p + 2)
      end

      if codepoints.end_with?(" ") || codepoints.end_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil, range(p - 1, p)
      end
    end

    codepoints.scan(/([0-9a-fA-F]+)|([ \t]+)/).each do |(codepoint_str, spaces)|
      if spaces
        codepoint_s += spaces.length
      else
        codepoint = codepoint_str.to_i(16)

        if codepoint >= 0x110000
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
          break
        end

        @escape     += codepoint.chr(Encoding::UTF_8)
        codepoint_s += codepoint_str.length
      end
    end
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 371 then
# line 667 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    if @version < 24
      if codepoints.start_with?(" ") || codepoints.start_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(@escape_s + 2, @escape_s + 3)
      end

      if spaces_p = codepoints.index(/[ \t]{2}/)
        diagnostic :fatal, :invalid_unicode_escape, nil,
          range(codepoint_s + spaces_p + 1, codepoint_s + spaces_p + 2)
      end

      if codepoints.end_with?(" ") || codepoints.end_with?("\t")
        diagnostic :fatal, :invalid_unicode_escape, nil, range(p - 1, p)
      end
    end

    codepoints.scan(/([0-9a-fA-F]+)|([ \t]+)/).each do |(codepoint_str, spaces)|
      if spaces
        codepoint_s += spaces.length
      else
        codepoint = codepoint_str.to_i(16)

        if codepoint >= 0x110000
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
          break
        end

        @escape     += codepoint.chr(Encoding::UTF_8)
        codepoint_s += codepoint_str.length
      end
    end
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 118 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 145 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 355 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 121 then
# line 714 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 148 then
# line 714 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 358 then
# line 714 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 123 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 150 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 360 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 120 then
# line 748 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 147 then
# line 748 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 357 then
# line 748 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 137 then
# line 752 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 164 then
# line 752 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 374 then
# line 752 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 136 then
# line 756 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 163 then
# line 756 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 373 then
# line 756 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 131 then
# line 762 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 158 then
# line 762 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 368 then
# line 762 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 130 then
# line 766 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 157 then
# line 766 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 367 then
# line 766 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 135 then
# line 772 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 162 then
# line 772 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 372 then
# line 772 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 132 then
# line 786 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 159 then
# line 786 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 369 then
# line 786 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 119 then
# line 812 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 146 then
# line 812 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 356 then
# line 812 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 170 then
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 175 then
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 57 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 30 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1546 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 32 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1562 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 34 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1590 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 211 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1420 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 230 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1438 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 238 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1470 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 33 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1602 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 779
		_goto_level = _again
		next
	end

       end
		end
	when 269 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1607 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 261 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1613 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 280 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1690 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 292 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1711 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 288 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1714 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 58 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1732 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 49 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2047 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tIDENTIFIER, ident_tok, ident_ts, ident_te)
        p = ident_te - 1

        if !@static_env.nil? && @static_env.declared?(ident_tok) && @version < 25
           @cs = 444;
        else
           @cs = 503;
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 310 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2063 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 390 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2090 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 386 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2093 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
      if @in_kwarg
        p = p - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end

      else
        	begin
		 @cs = 186
		_goto_level = _again
		next
	end

      end
     end
		end
	when 399 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2121 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 396 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2124 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 186
		_goto_level = _again
		next
	end
  end
		end
	when 435 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2337 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tDOT, '.', @ts, @ts + 1)
           emit(:tCOLON, ':', @ts + 1, @ts + 2)
           p = p - tok.length + 2
            @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 487 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2442 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 416 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2445 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 959
		_goto_level = _again
		next
	end
  end
		end
	when 102 then
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2516 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 260 then
# line 1046 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1514 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG, '{'.freeze, @te - 1, @te)
        else
          emit(:tLCURLY, '{'.freeze, @te - 1, @te)
        end
        @command_start = true
         @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 282 then
# line 1046 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1675 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG, '{'.freeze)
        else
          emit(:tLBRACE_ARG, '{'.freeze)
        end
        @command_start = true
         @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 382 then
# line 1046 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1936 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          @command_start = true
          emit(:tLAMBEG, '{'.freeze)
        else
          emit(:tLBRACE, '{'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 499 then
# line 1046 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 2146 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end
        @command_start = true

         @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 500 then
# line 1055 "lib/parser/lexer.rl"
		begin

    current_literal = literal
    if current_literal
      if current_literal.end_interp_brace_and_try_closing
        if version?(18, 19)
          emit(:tRCURLY, '}'.freeze, p - 1, p)
          @cond.lexpop
          @cmdarg.lexpop
        else
          emit(:tSTRING_DEND, '}'.freeze, p - 1, p)
        end

        if current_literal.saved_herebody_s
          @herebody_s = current_literal.saved_herebody_s
        end


        p = p - 1;
         @cs = (next_state_for_literal(current_literal));
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
    end
  		end
# line 2398 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)

        if @version < 24
          @cond.lexpop
          @cmdarg.lexpop
        else
          @cond.pop
          @cmdarg.pop
        end

        if tok == '}'.freeze || tok == ']'.freeze
          if @version >= 25
             @cs = 779;
          else
             @cs = 509;
          end
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 60 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 64 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 214 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1420 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 229 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1438 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 241 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1470 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 263 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1610 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 278 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1690 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 290 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1711 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 316 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2063 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 388 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2090 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 398 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2121 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 420 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2442 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 104 then
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2516 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 235 then
# line 1242 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1460 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg(cmd_state)); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 330 then
# line 1242 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 301 then
# line 1242 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 413 then
# line 1242 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1 "NONE"
		begin
	case  @act
	when 140 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end
        @command_start = true

         @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 141 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 331; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 142 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 143 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 144 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           @command_start = true
            @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 145 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 517; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 146 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'.freeze
           @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 472; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 147 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg(cmd_state));
          end
        else
          emit(:k__ENCODING__, '__ENCODING__'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 148 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 149 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 151 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 152 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 153 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 155 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 158 then
	begin begin p = (( @te))-1; end
 emit(:tDOT, '.', @ts, @ts + 1)
           emit(:tCOLON, ':', @ts + 1, @ts + 2)
           p = p - tok.length + 2
            @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 159 then
	begin begin p = (( @te))-1; end

        if @version >= 27
          emit_table(PUNCTUATION)
        else
          emit(:tDOT, tok(@ts, @ts + 1), @ts, @ts + 1)
          p = p - 1;
        end

         @cs = 451; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 161 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 162 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 472; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 164 then
	begin begin p = (( @te))-1; end

        emit_table(PUNCTUATION);
         @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 165 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION)
            @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 236 then
# line 1243 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1460 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg(cmd_state)); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 331 then
# line 1243 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 303 then
# line 1243 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 414 then
# line 1243 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2362 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 472; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 332 then
# line 1248 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 304 then
# line 1248 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 333 then
# line 1249 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 305 then
# line 1249 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 337 then
# line 1250 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 308 then
# line 1250 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 336 then
# line 1251 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 307 then
# line 1251 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1 "NONE"
		begin
	case  @act
	when 95 then
	begin begin p = (( @te))-1; end

        emit(:tUNARY_NUM, tok(@ts, @ts + 1), @ts, @ts + 1)
        p = p - 1;  @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 102 then
	begin begin p = (( @te))-1; end

        diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
      end
	when 116 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 117 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 517; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 118 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
           @command_start = true
            @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 122 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 779
		_goto_level = _again
		next
	end
 end
	when 123 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 444; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg(cmd_state)); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 127 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
 end
end 
			end
	when 334 then
# line 1252 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 306 then
# line 1252 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 335 then
# line 1257 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 482 then
# line 1262 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2326 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT, tok(@ts, tm), @ts, tm)
           p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 259 then
# line 1268 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1508 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '['.freeze, @te - 1, @te)
            @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 375 then
# line 1268 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1949 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '['.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 485 then
# line 1268 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 2431 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK2, '['.freeze)
            @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 251 then
# line 1275 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 1489 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if version?(18)
          emit(:tLPAREN2, '('.freeze, @te - 1, @te)
           @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
          emit(:tLPAREN_ARG, '('.freeze, @te - 1, @te)
           @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 264 then
# line 1275 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 1502 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN2, '('.freeze)
            @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 272 then
# line 1275 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 1629 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tLPAREN_ARG, '('.freeze, @te - 1, @te)
        if version?(18)
           @cs = 771; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 321 then
# line 1275 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 1954 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN, '('.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 426 then
# line 1275 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1

    if version?(18)
      @command_start = true
    end
  		end
# line 2394 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 427 then
# line 1285 "lib/parser/lexer.rl"
		begin

    @paren_nest -= 1
  		end
# line 2398 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)

        if @version < 24
          @cond.lexpop
          @cmdarg.lexpop
        else
          @cond.pop
          @cmdarg.pop
        end

        if tok == '}'.freeze || tok == ']'.freeze
          if @version >= 25
             @cs = 779;
          else
             @cs = 509;
          end
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 71 then
# line 1781 "lib/parser/lexer.rl"
		begin
 heredoc_e      = p 		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 345 then
# line 1782 "lib/parser/lexer.rl"
		begin
 new_herebody_s = p 		end
# line 1783 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        tok(@ts, heredoc_e) =~ /^<<(-?)(~?)(["'`]?)(.*)\3$/m

        indent      = !$1.empty? || !$2.empty?
        dedent_body = !$2.empty?
        type        =  $3.empty? ? '<<"'.freeze : ('<<'.freeze + $3)
        delimiter   =  $4

        if @version >= 27
          if delimiter.count("\n") > 0 || delimiter.count("\r") > 0
            diagnostic :error, :unterminated_heredoc_id, nil, range(@ts, @ts + 1)
          end
        elsif @version >= 24
          if delimiter.count("\n") > 0
            if delimiter.end_with?("\n")
              diagnostic :warning, :heredoc_id_ends_with_nl, nil, range(@ts, @ts + 1)
              delimiter = delimiter.rstrip
            else
              diagnostic :fatal, :heredoc_id_has_newline, nil, range(@ts, @ts + 1)
            end
          end
        end

        if dedent_body && version?(18, 19, 20, 21, 22)
          emit(:tLSHFT, '<<'.freeze, @ts, @ts + 2)
          p = @ts + 1
           @cs = 541; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = (push_literal(type, delimiter, @ts, heredoc_e, indent, dedent_body));

          @herebody_s ||= new_herebody_s
          p = @herebody_s - 1
        end
       end
		end
	when 340 then
# line 1873 "lib/parser/lexer.rl"
		begin
 tm = p - 1; diag_msg = :ivar_name 		end
# line 1876 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version >= 27
          diagnostic :error, diag_msg, { name: tok(tm, @te) }, range(tm, @te)
        else
          emit(:tCOLON, tok(@ts, @ts + 1), @ts, @ts + 1)
          p = @ts
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 343 then
# line 1874 "lib/parser/lexer.rl"
		begin
 tm = p - 2; diag_msg = :cvar_name 		end
# line 1876 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @version >= 27
          diagnostic :error, diag_msg, { name: tok(tm, @te) }, range(tm, @te)
        else
          emit(:tCOLON, tok(@ts, @ts + 1), @ts, @ts + 1)
          p = @ts
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 351 then
# line 1894 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 378 then
# line 1964 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1965 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 517; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 472 then
# line 2228 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 466 then
# line 2229 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 469 then
# line 2230 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 463 then
# line 2231 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 478 then
# line 2232 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 441 then
# line 2233 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 479 then
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 90 then
# line 2487 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 8 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 445 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2292 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 220 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1379 "lib/parser/lexer.rl"
		begin
 @act = 40;		end
	when 207 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1383 "lib/parser/lexer.rl"
		begin
 @act = 41;		end
	when 203 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1387 "lib/parser/lexer.rl"
		begin
 @act = 42;		end
	when 26 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1550 "lib/parser/lexer.rl"
		begin
 @act = 68;		end
	when 253 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1563 "lib/parser/lexer.rl"
		begin
 @act = 69;		end
	when 27 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1602 "lib/parser/lexer.rl"
		begin
 @act = 74;		end
	when 246 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1607 "lib/parser/lexer.rl"
		begin
 @act = 75;		end
	when 273 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1639 "lib/parser/lexer.rl"
		begin
 @act = 81;		end
	when 45 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1652 "lib/parser/lexer.rl"
		begin
 @act = 82;		end
	when 294 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1705 "lib/parser/lexer.rl"
		begin
 @act = 89;		end
	when 283 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1709 "lib/parser/lexer.rl"
		begin
 @act = 90;		end
	when 69 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1829 "lib/parser/lexer.rl"
		begin
 @act = 102;		end
	when 297 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1959 "lib/parser/lexer.rl"
		begin
 @act = 116;		end
	when 377 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1965 "lib/parser/lexer.rl"
		begin
 @act = 117;		end
	when 376 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1971 "lib/parser/lexer.rl"
		begin
 @act = 118;		end
	when 74 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @act = 122;		end
	when 295 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1290 "lib/parser/lexer.rl"
		begin
 @act = 123;		end
	when 298 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2082 "lib/parser/lexer.rl"
		begin
 @act = 127;		end
	when 495 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2146 "lib/parser/lexer.rl"
		begin
 @act = 140;		end
	when 490 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2172 "lib/parser/lexer.rl"
		begin
 @act = 141;		end
	when 498 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2182 "lib/parser/lexer.rl"
		begin
 @act = 143;		end
	when 491 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2187 "lib/parser/lexer.rl"
		begin
 @act = 144;		end
	when 492 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2192 "lib/parser/lexer.rl"
		begin
 @act = 145;		end
	when 497 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2196 "lib/parser/lexer.rl"
		begin
 @act = 146;		end
	when 489 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2207 "lib/parser/lexer.rl"
		begin
 @act = 147;		end
	when 484 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2221 "lib/parser/lexer.rl"
		begin
 @act = 148;		end
	when 406 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @act = 149;		end
	when 443 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2279 "lib/parser/lexer.rl"
		begin
 @act = 152;		end
	when 82 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @act = 153;		end
	when 409 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2322 "lib/parser/lexer.rl"
		begin
 @act = 155;		end
	when 434 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2337 "lib/parser/lexer.rl"
		begin
 @act = 158;		end
	when 431 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2343 "lib/parser/lexer.rl"
		begin
 @act = 159;		end
	when 400 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1290 "lib/parser/lexer.rl"
		begin
 @act = 161;		end
	when 412 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2362 "lib/parser/lexer.rl"
		begin
 @act = 162;		end
	when 404 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2388 "lib/parser/lexer.rl"
		begin
 @act = 164;		end
	when 411 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2394 "lib/parser/lexer.rl"
		begin
 @act = 165;		end
	when 88 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2474 "lib/parser/lexer.rl"
		begin
 @act = 177;		end
	when 502 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2491 "lib/parser/lexer.rl"
		begin
 @act = 179;		end
	when 176 then
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 124 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 151 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 361 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 129 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 156 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 366 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 122 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 149 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 359 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 128 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 155 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 365 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 126 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 153 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 363 then
# line 741 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 133 then
# line 772 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 786 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 160 then
# line 772 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 786 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 370 then
# line 772 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 786 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 116 then
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 812 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 144 then
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 812 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 354 then
# line 818 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 812 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 61 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 213 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1420 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 228 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1438 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 240 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1470 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 262 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1610 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 779
		_goto_level = _again
		next
	end
  end
		end
	when 277 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1690 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 289 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1711 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 315 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2063 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 387 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2090 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 397 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2121 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 419 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2442 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 103 then
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2516 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 474 then
# line 2232 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 438 then
# line 2233 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 453 then
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 446 then
# line 2291 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 644 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 442 then
# line 2292 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 644 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 268 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1607 "lib/parser/lexer.rl"
		begin
 @act = 75;		end
	when 81 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 502 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2337 "lib/parser/lexer.rl"
		begin
 @act = 158;		end
	when 35 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1602 "lib/parser/lexer.rl"
		begin
 @act = 74;		end
	when 46 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1652 "lib/parser/lexer.rl"
		begin
 @act = 82;		end
	when 436 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2337 "lib/parser/lexer.rl"
		begin
 @act = 158;		end
	when 95 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2474 "lib/parser/lexer.rl"
		begin
 @act = 177;		end
	when 65 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1732 "lib/parser/lexer.rl"
		begin
 @act = 95;		end
	when 85 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2176 "lib/parser/lexer.rl"
		begin
 @act = 142;		end
	when 94 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2474 "lib/parser/lexer.rl"
		begin
 @act = 177;		end
	when 37 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1562 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1563 "lib/parser/lexer.rl"
		begin
 @act = 69;		end
	when 380 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1964 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2036 "lib/parser/lexer.rl"
		begin
 @act = 122;		end
	when 379 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1964 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1290 "lib/parser/lexer.rl"
		begin
 @act = 123;		end
	when 475 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2232 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @act = 149;		end
	when 127 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 154 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 364 then
# line 707 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 125 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 152 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 891 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.squiggly_heredoc? && escaped_char == "\n".freeze
        # Squiggly heredocs like
        #   <<~-HERE
        #     1\
        #     2
        #   HERE
        # treat '\' as a line continuation, but still dedent the body, so the heredoc above becomes "12\n".
        # This information is emitted as is, without escaping,
        # later this escape sequence (\\\n) gets handled manually in the Lexer::Dedenter
        current_literal.extend_string(tok, @ts, @te)
      elsif current_literal.supports_line_continuation_via_slash? && escaped_char == "\n".freeze
        # Heredocs, regexp and a few other types of literals support line
        # continuation via \\\n sequence. The code like
        #   "a\
        #   b"
        # must be parsed as "ab"
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      elsif current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed (in cases like "\\C-\\\n\\M-x")
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 362 then
# line 718 "lib/parser/lexer.rl"
		begin

    @escape = @source_buffer.slice(p - 1).chr

    if @version >= 27 && ((0..8).include?(@escape.ord) || (14..31).include?(@escape.ord))
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 726 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 730 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1896 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value.getbyte(0))
        else
          emit(:tCHARACTER, value)
        end

         @cs = 779; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 470 then
# line 2228 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 464 then
# line 2229 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 467 then
# line 2230 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 461 then
# line 2231 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 473 then
# line 2232 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 437 then
# line 2233 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 31 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 858 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1562 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1563 "lib/parser/lexer.rl"
		begin
 @act = 69;		end
	when 62 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1732 "lib/parser/lexer.rl"
		begin
 @act = 95;		end
	when 92 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1198 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1201 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2474 "lib/parser/lexer.rl"
		begin
 @act = 177;		end
	when 480 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2267 "lib/parser/lexer.rl"
		begin
 @act = 151;		end
	when 476 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2232 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2267 "lib/parser/lexer.rl"
		begin
 @act = 151;		end
	when 440 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2233 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2234 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 635 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2267 "lib/parser/lexer.rl"
		begin
 @act = 151;		end
# line 23491 "lib/parser/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _lex_to_state_actions[ @cs] 
	when 97 then
# line 1 "NONE"
		begin
 @ts = nil;		end
# line 23501 "lib/parser/lexer.rb"
	end

	if  @cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _lex_eof_trans[ @cs] > 0
		_trans = _lex_eof_trans[ @cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 294 "lib/parser/lexer.rl"
    # %

    @p = p

    if @token_queue.any?
      @token_queue.shift
    elsif @cs == klass.lex_error
      [ false, [ '$error'.freeze, range(p - 1, p) ] ]
    else
      eof = @source_pts.size
      [ false, [ '$eof'.freeze,   range(eof, eof) ] ]
    end
  end

  protected

  def eof_codepoint?(point)
    [0x04, 0x1a, 0x00].include? point
  end

  def version?(*versions)
    versions.include?(@version)
  end

  def stack_pop
    @top -= 1
    @stack[@top]
  end

  def encode_escape(ord)
    ord.chr.force_encoding(@source_buffer.source.encoding)
  end

  def tok(s = @ts, e = @te)
    @source_buffer.slice(s...e)
  end

  def range(s = @ts, e = @te)
    Parser::Source::Range.new(@source_buffer, s, e)
  end

  def emit(type, value = tok, s = @ts, e = @te)
    token = [ type, [ value, range(s, e) ] ]

    @token_queue.push(token)

    @tokens.push(token) if @tokens

    token
  end

  def emit_table(table, s = @ts, e = @te)
    value = tok(s, e)

    emit(table[value], value, s, e)
  end

  def emit_do(do_block=false)
    if @cond.active?
      emit(:kDO_COND, 'do'.freeze)
    elsif @cmdarg.active? || do_block
      emit(:kDO_BLOCK, 'do'.freeze)
    else
      emit(:kDO, 'do'.freeze)
    end
  end

  def arg_or_cmdarg(cmd_state)
    if cmd_state
      self.class.lex_en_expr_cmdarg
    else
      self.class.lex_en_expr_arg
    end
  end

  def emit_comment(s = @ts, e = @te)
    if @comments
      @comments.push(Parser::Source::Comment.new(range(s, e)))
    end

    if @tokens
      @tokens.push([ :tCOMMENT, [ tok(s, e), range(s, e) ] ])
    end

    nil
  end

  def diagnostic(type, reason, arguments=nil, location=range, highlights=[])
    @diagnostics.process(
        Parser::Diagnostic.new(type, reason, arguments, location, highlights))
  end

  #
  # === LITERAL STACK ===
  #

  def push_literal(*args)
    new_literal = Literal.new(self, *args)
    @literal_stack.push(new_literal)
    next_state_for_literal(new_literal)
  end

  def next_state_for_literal(literal)
    if literal.words? && literal.backslash_delimited?
      if literal.interpolate?
        self.class.lex_en_interp_backslash_delimited_words
      else
        self.class.lex_en_plain_backslash_delimited_words
      end
    elsif literal.words? && !literal.backslash_delimited?
      if literal.interpolate?
        self.class.lex_en_interp_words
      else
        self.class.lex_en_plain_words
      end
    elsif !literal.words? && literal.backslash_delimited?
      if literal.interpolate?
        self.class.lex_en_interp_backslash_delimited
      else
        self.class.lex_en_plain_backslash_delimited
      end
    else
      if literal.interpolate?
        self.class.lex_en_interp_string
      else
        self.class.lex_en_plain_string
      end
    end
  end

  def literal
    @literal_stack.last
  end

  def pop_literal
    old_literal = @literal_stack.pop

    @dedent_level = old_literal.dedent_level

    if old_literal.type == :tREGEXP_BEG
      # Fetch modifiers.
      self.class.lex_en_regexp_modifiers
    else
      self.class.lex_en_expr_end
    end
  end

  # Mapping of strings to parser tokens.

  PUNCTUATION = {
    '='   => :tEQL,     '&'   => :tAMPER2,  '|'   => :tPIPE,
    '!'   => :tBANG,    '^'   => :tCARET,   '+'   => :tPLUS,
    '-'   => :tMINUS,   '*'   => :tSTAR2,   '/'   => :tDIVIDE,
    '%'   => :tPERCENT, '~'   => :tTILDE,   ','   => :tCOMMA,
    ';'   => :tSEMI,    '.'   => :tDOT,     '..'  => :tDOT2,
    '...' => :tDOT3,    '['   => :tLBRACK2, ']'   => :tRBRACK,
    '('   => :tLPAREN2, ')'   => :tRPAREN,  '?'   => :tEH,
    ':'   => :tCOLON,   '&&'  => :tANDOP,   '||'  => :tOROP,
    '-@'  => :tUMINUS,  '+@'  => :tUPLUS,   '~@'  => :tTILDE,
    '**'  => :tPOW,     '->'  => :tLAMBDA,  '=~'  => :tMATCH,
    '!~'  => :tNMATCH,  '=='  => :tEQ,      '!='  => :tNEQ,
    '>'   => :tGT,      '>>'  => :tRSHFT,   '>='  => :tGEQ,
    '<'   => :tLT,      '<<'  => :tLSHFT,   '<='  => :tLEQ,
    '=>'  => :tASSOC,   '::'  => :tCOLON2,  '===' => :tEQQ,
    '<=>' => :tCMP,     '[]'  => :tAREF,    '[]=' => :tASET,
    '{'   => :tLCURLY,  '}'   => :tRCURLY,  '`'   => :tBACK_REF2,
    '!@'  => :tBANG,    '&.'  => :tANDDOT,  '.:'  => :tMETHREF
  }

  PUNCTUATION_BEGIN = {
    '&'   => :tAMPER,   '*'   => :tSTAR,    '**'  => :tDSTAR,
    '+'   => :tUPLUS,   '-'   => :tUMINUS,  '::'  => :tCOLON3,
    '('   => :tLPAREN,  '{'   => :tLBRACE,  '['   => :tLBRACK,
  }

  KEYWORDS = {
    'if'     => :kIF_MOD,      'unless'   => :kUNLESS_MOD,
    'while'  => :kWHILE_MOD,   'until'    => :kUNTIL_MOD,
    'rescue' => :kRESCUE_MOD,  'defined?' => :kDEFINED,
    'BEGIN'  => :klBEGIN,      'END'      => :klEND,
  }

  KEYWORDS_BEGIN = {
    'if'     => :kIF,          'unless'   => :kUNLESS,
    'while'  => :kWHILE,       'until'    => :kUNTIL,
    'rescue' => :kRESCUE,      'defined?' => :kDEFINED,
    'BEGIN'  => :klBEGIN,      'END'      => :klEND,
  }

  %w(class module def undef begin end then elsif else ensure case when
     for break next redo retry in do return yield super self nil true
     false and or not alias __FILE__ __LINE__ __ENCODING__).each do |keyword|
    KEYWORDS_BEGIN[keyword] = KEYWORDS[keyword] = :"k#{keyword.upcase}"
  end

  
# line 2531 "lib/parser/lexer.rl"

  # %
end
